{"abi":[{"type":"constructor","inputs":[{"name":"_forwarder","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"allVaults","inputs":[{"name":"i","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"allVaultsLength","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"createVaultERC20","inputs":[{"name":"asset","type":"address","internalType":"contract IERC20"},{"name":"goal","type":"uint256","internalType":"uint256"},{"name":"name","type":"string","internalType":"string"}],"outputs":[{"name":"vault","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"createVaultNative","inputs":[{"name":"goal","type":"uint256","internalType":"uint256"},{"name":"name","type":"string","internalType":"string"}],"outputs":[{"name":"vault","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"forwarder","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getCreatorVaults","inputs":[{"name":"creator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"isTrustedForwarder","inputs":[{"name":"forwarder","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"trustedForwarder","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"event","name":"VaultCreated","inputs":[{"name":"creator","type":"address","indexed":true,"internalType":"address"},{"name":"vault","type":"address","indexed":false,"internalType":"address"},{"name":"asset","type":"address","indexed":true,"internalType":"address"},{"name":"isNative","type":"bool","indexed":false,"internalType":"bool"},{"name":"goal","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"name","type":"string","indexed":false,"internalType":"string"}],"anonymous":false}],"bytecode":{"object":"0x60c060405234801561001057600080fd5b5060405161200638038061200683398101604081905261002f9161008d565b6001600160a01b038116608081905261007c5760405162461bcd60e51b815260206004820152600b60248201526a0666f727761726465723d360ac1b604482015260640160405180910390fd5b6001600160a01b031660a0526100bd565b60006020828403121561009f57600080fd5b81516001600160a01b03811681146100b657600080fd5b9392505050565b60805160a051611f096100fd6000396000818161018b01528181610267015261039d01526000818160b30152818161011501526104d80152611f096000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639094a91e1161005b5780639094a91e1461014d5780639a543d8214610160578063c0ffcf8d14610173578063f645d4f91461018657600080fd5b80634cd185771461008d578063572b6c05146100a3578063674e9ca2146100f35780637da0a87714610113575b600080fd5b6001546040519081526020015b60405180910390f35b6100e36100b1366004610557565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b604051901515815260200161009a565b610106610101366004610557565b6101ad565b60405161009a919061057b565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161009a565b61013561015b3660046105c7565b610221565b61013561016e366004610629565b610251565b610135610181366004610685565b610386565b6101357f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152602081815260409182902080548351818402810184019094528084526060939283018282801561021557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101f7575b50505050509050919050565b600060018281548110610236576102366106d1565b6000918252602090912001546001600160a01b031692915050565b60008061025c6104b7565b9050808660008787877f000000000000000000000000000000000000000000000000000000000000000060405161029290610532565b6102a29796959493929190610710565b604051809103906000f0801580156102be573d6000803e3d6000fd5b506001600160a01b0380831660008181526020818152604080832080546001818101835591855292842090920180548688166001600160a01b03199182168117909255835480850185559385527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909301805490931617909155519395509189169290917fdc341d3bc7b547adc28dc5fd69fd2ac058a6a5938cf499dcd2c7db3f80f374c5916103759187918b908b908b90610768565b60405180910390a350949350505050565b6000806103916104b7565b905080600060018787877f00000000000000000000000000000000000000000000000000000000000000006040516103c890610532565b6103d89796959493929190610710565b604051809103906000f0801580156103f4573d6000803e3d6000fd5b506001600160a01b0380831660008181526020818152604080832080546001818101835591855292842090920180549587166001600160a01b03199687168117909155825480840184558385527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180549096161790945592519395509290917fdc341d3bc7b547adc28dc5fd69fd2ac058a6a5938cf499dcd2c7db3f80f374c5916104a79187918b908b908b90610768565b60405180910390a3509392505050565b60006104c16104c6565b905090565b600036601480821080159061050357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633145b1561052a57610517368284038160006107a3565b610520916107cd565b60601c9250505090565b339250505090565b6116b98061081b83390190565b6001600160a01b038116811461055457600080fd5b50565b60006020828403121561056957600080fd5b81356105748161053f565b9392505050565b602080825282518282018190526000918401906040840190835b818110156105bc5783516001600160a01b0316835260209384019390920191600101610595565b509095945050505050565b6000602082840312156105d957600080fd5b5035919050565b60008083601f8401126105f257600080fd5b50813567ffffffffffffffff81111561060a57600080fd5b60208301915083602082850101111561062257600080fd5b9250929050565b6000806000806060858703121561063f57600080fd5b843561064a8161053f565b935060208501359250604085013567ffffffffffffffff81111561066d57600080fd5b610679878288016105e0565b95989497509550505050565b60008060006040848603121561069a57600080fd5b83359250602084013567ffffffffffffffff8111156106b857600080fd5b6106c4868287016105e0565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0388811682528716602082015285151560408201526060810185905260c06080820181905260009061074c90830185876106e7565b905060018060a01b03831660a083015298975050505050505050565b60018060a01b038616815284151560208201528360408201526080606082015260006107986080830184866106e7565b979650505050505050565b600080858511156107b357600080fd5b838611156107c057600080fd5b5050820193919092039150565b80356bffffffffffffffffffffffff198116906014841015610813576bffffffffffffffffffffffff196bffffffffffffffffffffffff198560140360031b1b82161691505b509291505056fe61012060405234801561001157600080fd5b506040516116b93803806116b98339810160408190526100309161013c565b60016000556001600160a01b038082166080528616158061004f575082155b1561006d57604051633494a40d60e21b815260040160405180910390fd5b83156100a0576001600160a01b0385161561009b57604051633494a40d60e21b815260040160405180910390fd5b6100c7565b6001600160a01b0385166100c757604051633494a40d60e21b815260040160405180910390fd5b6001600160a01b0380871660a052851660c05283151560e05261010083905260016100f283826102e8565b505050505050506103a6565b6001600160a01b038116811461011357600080fd5b50565b8051610121816100fe565b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c0878903121561015557600080fd5b8651610160816100fe565b6020880151909650610171816100fe565b6040880151909550801515811461018757600080fd5b6060880151608089015191955093506001600160401b038111156101aa57600080fd5b87016000601f82018a136101bc578081fd5b81516001600160401b038111156101d5576101d5610126565b604051601f8201601f19908116603f011681016001600160401b038111828210171561020357610203610126565b6040528181528382016020018c101561021a578283fd5b825b828110156102385760208186018101518383018201520161021c565b50908101602001919091529250610253905060a08801610116565b90509295509295509295565b600181811c9082168061027357607f821691505b60208210810361029357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102e357806000526020600020601f840160051c810160208510156102c05750805b601f840160051c820191505b818110156102e057600081556001016102cc565b50505b505050565b81516001600160401b0381111561030157610301610126565b6103158161030f845461025f565b84610299565b6020601f82116001811461034957600083156103315750848201515b600019600385901b1c1916600184901b1784556102e0565b600084815260208120601f198516915b828110156103795787850151825560209485019460019092019101610359565b50848210156103975786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60805160a05160c05160e0516101005161121a61049f60003960008181610187015281816102b40152818161057501528181610665015281816108d801528181610a8c0152610dde01526000818160e80152818161036d015281816104c4015281816106b30152818161091101528181610aee0152610ba801526000818161026b0152818161080f01528181610984015281816109c401528181610b2601528181610c0801528181610cd60152610d160152600081816101f0015281816105dc015281816106db015281816107b001528181610831015261086e01526000818161032b0152818161039e0152610f29015261121a6000f3fe6080604052600436106100e15760003560e01c8063572b6c051161007f578063b51459fe11610059578063b51459fe146103c2578063c1cbbca7146103d7578063c66f2455146103f7578063ce40a3081461040c57600080fd5b8063572b6c051461030e57806373cfc6b21461035b5780637da0a8771461038f57600080fd5b806338d52e0f116100bb57806338d52e0f146102595780633ccfd60b1461028d57806340193883146102a257806344aa5700146102e457600080fd5b806302d05d3f146101de57806306fdde031461022f5780631f6899351461025157600080fd5b366101d9577f00000000000000000000000000000000000000000000000000000000000000006101245760405163f170c67f60e01b815260040160405180910390fd5b3460000361014557604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133916000805160206111c5833981519152919081900360600190a260025460ff161580156101aa57507f00000000000000000000000000000000000000000000000000000000000000008110155b156101d75760408051428152602081018390526000805160206111a5833981519152910160405180910390a15b005b600080fd5b3480156101ea57600080fd5b506102127f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023b57600080fd5b5061024461042c565b6040516102269190610ff4565b6101d76104ba565b34801561026557600080fd5b506102127f000000000000000000000000000000000000000000000000000000000000000081565b34801561029957600080fd5b506101d76105d2565b3480156102ae57600080fd5b506102d67f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610226565b3480156102f057600080fd5b506002546102fe9060ff1681565b6040519015158152602001610226565b34801561031a57600080fd5b506102fe610329366004611042565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b34801561036757600080fd5b506102fe7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039b57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610212565b3480156103ce57600080fd5b506102fe6108c5565b3480156103e357600080fd5b506101d76103f2366004611072565b610907565b34801561040357600080fd5b506102d6610aea565b34801561041857600080fd5b506101d761042736600461108b565b610b9e565b60018054610439906110da565b80601f0160208091040260200160405190810160405280929190818152602001828054610465906110da565b80156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b505050505081565b6104c2610e40565b7f00000000000000000000000000000000000000000000000000000000000000006105005760405163f170c67f60e01b815260040160405180910390fd5b3460000361052157604051631f2a200560e01b815260040160405180910390fd5b4761052a610e6a565b604080513481526020810184905260018183015290516001600160a01b0392909216916000805160206111c58339815191529181900360600190a260025460ff1615801561059857507f00000000000000000000000000000000000000000000000000000000000000008110155b156105c55760408051428152602081018390526000805160206111a5833981519152910160405180910390a15b506105d06001600055565b565b6105da610e40565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661060c610e6a565b6001600160a01b031614610633576040516393687c0b60e01b815260040160405180910390fd5b60025460ff161561065757604051636507689f60e01b815260040160405180910390fd5b6000610661610aea565b90507f00000000000000000000000000000000000000000000000000000000000000008110156106a4576040516378c754c960e01b815260040160405180910390fd5b6002805460ff191660011790557f0000000000000000000000000000000000000000000000000000000000000000156108025760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610744576040519150601f19603f3d011682016040523d82523d6000602084013e610749565b606091505b50509050806107985760405162461bcd60e51b81526020600482015260166024820152751b985d1a5d99481d1c985b9cd9995c8819985a5b195960521b60448201526064015b60405180910390fd5b60408051838152600160208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a2506105c5565b6108566001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610e74565b60408051828152600060208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a2506105d06001600055565b60025460009060ff1615801561090257507f00000000000000000000000000000000000000000000000000000000000000006108ff610aea565b10155b905090565b61090f610e40565b7f00000000000000000000000000000000000000000000000000000000000000001561094e5760405163f170c67f60e01b815260040160405180910390fd5b8060000361096f57604051631f2a200560e01b815260040160405180910390fd5b6109ac61097a610e6a565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903084610ed8565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a379190611114565b9050610a41610e6a565b604080518481526020810184905260008183015290516001600160a01b0392909216916000805160206111c58339815191529181900360600190a260025460ff16158015610aaf57507f00000000000000000000000000000000000000000000000000000000000000008110155b15610adc5760408051428152602081018390526000805160206111a5833981519152910160405180910390a15b50610ae76001600055565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000610b99576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109029190611114565b504790565b610ba6610e40565b7f000000000000000000000000000000000000000000000000000000000000000015610be55760405163f170c67f60e01b815260040160405180910390fd5b84600003610c0657604051631f2a200560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d505accf610c3d610e6a565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905260e401600060405180830381600087803b158015610ca957600080fd5b505af1158015610cbd573d6000803e3d6000fd5b50505050610cfe610ccc610e6a565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903088610ed8565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d899190611114565b9050610d93610e6a565b604080518881526020810184905260008183015290516001600160a01b0392909216916000805160206111c58339815191529181900360600190a260025460ff16158015610e0157507f00000000000000000000000000000000000000000000000000000000000000008110155b15610e2e5760408051428152602081018390526000805160206111a5833981519152910160405180910390a15b50610e396001600055565b5050505050565b600260005403610e6357604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000610902610f17565b6040516001600160a01b03838116602483015260448201839052610ed391859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610f83565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610f119186918216906323b872dd90608401610ea1565b50505050565b6000366014808210801590610f5457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633145b15610f7b57610f683682840381600061112d565b610f7191611157565b60601c9250505090565b339250505090565b600080602060008451602086016000885af180610fa6576040513d6000823e3d81fd5b50506000513d91508115610fbe578060011415610fcb565b6001600160a01b0384163b155b15610f1157604051635274afe760e01b81526001600160a01b038516600482015260240161078f565b602081526000825180602084015260005b818110156110225760208186018101516040868401015201611005565b506000604082850101526040601f19601f83011684010191505092915050565b60006020828403121561105457600080fd5b81356001600160a01b038116811461106b57600080fd5b9392505050565b60006020828403121561108457600080fd5b5035919050565b600080600080600060a086880312156110a357600080fd5b8535945060208601359350604086013560ff811681146110c257600080fd5b94979396509394606081013594506080013592915050565b600181811c908216806110ee57607f821691505b60208210810361110e57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561112657600080fd5b5051919050565b6000808585111561113d57600080fd5b8386111561114a57600080fd5b5050820193919092039150565b80356bffffffffffffffffffffffff19811690601484101561119d576bffffffffffffffffffffffff196bffffffffffffffffffffffff198560140360031b1b82161691505b509291505056fe85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40a2646970667358221220eb473c74c259fcf8ef82e11dd0b9e6a9787d5b809126ea067a4f3d716f9a8b7564736f6c634300081c0033a264697066735822122041cb266f63974e70486bc27863eecef7146d02b558a75c3107a7c0bd08479b2d64736f6c634300081c0033","sourceMap":"247:1985:1:-:0;;;611:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1500:37:5;;;;;;680:48:1::1;;;::::0;-1:-1:-1;;;680:48:1;;511:2:31;680:48:1::1;::::0;::::1;493:21:31::0;550:2;530:18;;;523:30;-1:-1:-1;;;569:18:31;;;562:41;620:18;;680:48:1::1;;;;;;;;-1:-1:-1::0;;;;;738:22:1::1;;::::0;247:1985;;14:290:31;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:31;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:31:o;309:335::-;247:1985:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"","sourceMap":"247:1985:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1742:100;1818:10;:17;1742:100;;160:25:31;;;148:2;133:18;1742:100:1;;;;;;;;1832:137:5;;;;;;:::i;:::-;1707:17;-1:-1:-1;;;;;1931:31:5;;;;;;;1832:137;;;;749:14:31;;742:22;724:41;;712:2;697:18;1832:137:5;584:187:31;1605:131:1;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1624:107:5:-;1707:17;1624:107;;;-1:-1:-1;;;;;1582:32:31;;;1564:51;;1552:2;1537:18;1624:107:5;1418:203:31;1848:99:1;;;;;;:::i;:::-;;:::i;773:413::-;;;;;;:::i;:::-;;:::i;1192:407::-;;;;;;:::i;:::-;;:::i;570:34::-;;;;;1605:131;-1:-1:-1;;;;;1706:23:1;;:14;:23;;;;;;;;;;;;1699:30;;;;;;;;;;;;;;;;;1671:16;;1699:30;;;1706:23;1699:30;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1699:30:1;;;;;;;;;;;;;;;;;;;;;;;1605:131;;;:::o;1848:99::-;1901:7;1927:10;1938:1;1927:13;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;1927:13:1;;1848:99;-1:-1:-1;;1848:99:1:o;773:413::-;883:13;912:15;930:12;:10;:12::i;:::-;912:30;;978:7;987:5;994;1001:4;1007;;1013:9;968:55;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1034:23:1;;;:14;:23;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1034:35:1;;;;;;;;1079:22;;;;;;;;;;;;;;;;;;;;;;;1116:63;952:72;;-1:-1:-1;1116:63:1;;;;1034:23;;1116:63;;;;952:72;;1168:4;;1174;;;;1116:63;:::i;:::-;;;;;;;;902:284;773:413;;;;;;:::o;1192:407::-;1289:13;1318:15;1336:12;:10;:12::i;:::-;1318:30;;1384:7;1408:1;1413:4;1419;1425;;1431:9;1374:67;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1452:23:1;;;:14;:23;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1452:35:1;;;;;;;;1497:22;;;;;;;;;;;;;;;;;;;;;1534:58;;1358:84;;-1:-1:-1;1452:14:1;:23;;1534:58;;;;1358:84;;1581:4;;1587;;;;1534:58;:::i;:::-;;;;;;;;1308:291;1192:407;;;;;:::o;1990:116::-;2044:9;2072:27;:25;:27::i;:::-;2065:34;;1990:116;:::o;2206:471:5:-;2268:7;2312:8;3567:2;2403:37;;;;;;:71;;-1:-1:-1;1707:17:5;-1:-1:-1;;;;;1931:31:5;2463:10;1931:31;2444:30;2399:272;;;2541:47;:8;2550:36;;;2541:8;;:47;:::i;:::-;2533:56;;;:::i;:::-;2525:65;;2518:72;;;;2206:471;:::o;2399:272::-;735:10:8;2635:25:5;;;;2206:471;:::o;-1:-1:-1:-;;;;;;;;:::o;196:131:31:-;-1:-1:-1;;;;;271:31:31;;261:42;;251:70;;317:1;314;307:12;251:70;196:131;:::o;332:247::-;391:6;444:2;432:9;423:7;419:23;415:32;412:52;;;460:1;457;450:12;412:52;499:9;486:23;518:31;543:5;518:31;:::i;:::-;568:5;332:247;-1:-1:-1;;;332:247:31:o;776:637::-;966:2;978:21;;;1048:13;;951:18;;;1070:22;;;918:4;;1149:15;;;1123:2;1108:18;;;918:4;1192:195;1206:6;1203:1;1200:13;1192:195;;;1271:13;;-1:-1:-1;;;;;1267:39:31;1255:52;;1336:2;1362:15;;;;1327:12;;;;1303:1;1221:9;1192:195;;;-1:-1:-1;1404:3:31;;776:637;-1:-1:-1;;;;;776:637:31:o;1626:226::-;1685:6;1738:2;1726:9;1717:7;1713:23;1709:32;1706:52;;;1754:1;1751;1744:12;1706:52;-1:-1:-1;1799:23:31;;1626:226;-1:-1:-1;1626:226:31:o;1857:348::-;1909:8;1919:6;1973:3;1966:4;1958:6;1954:17;1950:27;1940:55;;1991:1;1988;1981:12;1940:55;-1:-1:-1;2014:20:31;;2057:18;2046:30;;2043:50;;;2089:1;2086;2079:12;2043:50;2126:4;2118:6;2114:17;2102:29;;2178:3;2171:4;2162:6;2154;2150:19;2146:30;2143:39;2140:59;;;2195:1;2192;2185:12;2140:59;1857:348;;;;;:::o;2210:681::-;2314:6;2322;2330;2338;2391:2;2379:9;2370:7;2366:23;2362:32;2359:52;;;2407:1;2404;2397:12;2359:52;2446:9;2433:23;2465:31;2490:5;2465:31;:::i;:::-;2515:5;-1:-1:-1;2593:2:31;2578:18;;2565:32;;-1:-1:-1;2674:2:31;2659:18;;2646:32;2701:18;2690:30;;2687:50;;;2733:1;2730;2723:12;2687:50;2772:59;2823:7;2814:6;2803:9;2799:22;2772:59;:::i;:::-;2210:681;;;;-1:-1:-1;2850:8:31;-1:-1:-1;;;;2210:681:31:o;2896:525::-;2976:6;2984;2992;3045:2;3033:9;3024:7;3020:23;3016:32;3013:52;;;3061:1;3058;3051:12;3013:52;3106:23;;;-1:-1:-1;3204:2:31;3189:18;;3176:32;3231:18;3220:30;;3217:50;;;3263:1;3260;3253:12;3217:50;3302:59;3353:7;3344:6;3333:9;3329:22;3302:59;:::i;:::-;2896:525;;3380:8;;-1:-1:-1;3276:85:31;;-1:-1:-1;;;;2896:525:31:o;3426:127::-;3487:10;3482:3;3478:20;3475:1;3468:31;3518:4;3515:1;3508:15;3542:4;3539:1;3532:15;3558:267;3647:6;3642:3;3635:19;3699:6;3692:5;3685:4;3680:3;3676:14;3663:43;-1:-1:-1;3751:1:31;3726:16;;;3744:4;3722:27;;;3715:38;;;;3807:2;3786:15;;;-1:-1:-1;;3782:29:31;3773:39;;;3769:50;;3558:267::o;3830:709::-;-1:-1:-1;;;;;4138:32:31;;;4120:51;;4207:32;;4202:2;4187:18;;4180:60;4283:14;;4276:22;4271:2;4256:18;;4249:50;4330:2;4315:18;;4308:34;;;4379:3;4373;4358:19;;4351:32;;;-1:-1:-1;;4400:63:31;;4443:19;;4435:6;4427;4400:63;:::i;:::-;4392:71;;4529:1;4525;4520:3;4516:11;4512:19;4504:6;4500:32;4494:3;4483:9;4479:19;4472:61;3830:709;;;;;;;;;;:::o;4544:498::-;4810:1;4806;4801:3;4797:11;4793:19;4785:6;4781:32;4770:9;4763:51;4864:6;4857:14;4850:22;4845:2;4834:9;4830:18;4823:50;4909:6;4904:2;4893:9;4889:18;4882:34;4952:3;4947:2;4936:9;4932:18;4925:31;4744:4;4973:63;5031:3;5020:9;5016:19;5008:6;5000;4973:63;:::i;:::-;4965:71;4544:498;-1:-1:-1;;;;;;;4544:498:31:o;5047:331::-;5152:9;5163;5205:8;5193:10;5190:24;5187:44;;;5227:1;5224;5217:12;5187:44;5256:6;5246:8;5243:20;5240:40;;;5276:1;5273;5266:12;5240:40;-1:-1:-1;;5302:23:31;;;5347:25;;;;;-1:-1:-1;5047:331:31:o;5383:374::-;5504:19;;-1:-1:-1;;5541:40:31;;;5601:2;5593:11;;5590:161;;;5713:26;5709:31;5678:26;5674:31;5667:3;5663:2;5659:12;5656:1;5652:20;5648:58;5644:2;5640:67;5636:105;5627:114;;5590:161;;5383:374;;;;:::o","linkReferences":{},"immutableReferences":{"592":[{"start":395,"length":32},{"start":615,"length":32},{"start":925,"length":32}],"892":[{"start":179,"length":32},{"start":277,"length":32},{"start":1240,"length":32}]}},"methodIdentifiers":{"allVaults(uint256)":"9094a91e","allVaultsLength()":"4cd18577","createVaultERC20(address,uint256,string)":"9a543d82","createVaultNative(uint256,string)":"c0ffcf8d","forwarder()":"f645d4f9","getCreatorVaults(address)":"674e9ca2","isTrustedForwarder(address)":"572b6c05","trustedForwarder()":"7da0a877"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"allVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allVaultsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createVaultERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createVaultNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreatorVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultFactory.sol\":\"VaultFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":forge-std/=node_modules/forge-std/src/\"]},\"sources\":{\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ERC2771Context } from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\n\\ninterface IERC20Permit {\\n    function permit(\\n        address owner, address spender, uint256 value,\\n        uint256 deadline, uint8 v, bytes32 r, bytes32 s\\n    ) external;\\n}\\n\\n/**\\n * @title Vault\\n * @notice Holds either ONE ERC20 or native MON. Meta-tx aware via ERC2771.\\n */\\ncontract Vault is ReentrancyGuard, ERC2771Context {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable creator;\\n    IERC20  public immutable asset;      \\n    bool    public immutable isNative;   \\n    uint256 public immutable goal;      \\n    string  public name;\\n\\n    // State\\n    bool public isWithdrawn;\\n\\n    // Events\\n    event Deposited(address indexed from, uint256 amount, uint256 newBalance, bool isNative);\\n    event GoalReached(uint256 timestamp, uint256 balance);\\n    event Withdrawn(address indexed to, uint256 amount, bool isNative);\\n\\n    // Errors\\n    error NotCreator();\\n    error GoalNotReached();\\n    error AlreadyWithdrawn();\\n    error InvalidParam();\\n    error ZeroAmount();\\n    error WrongAsset();\\n\\n    constructor(\\n        address _creator,\\n        IERC20 _asset,           \\n        bool _isNative,\\n        uint256 _goal,\\n        string memory _name,\\n        address trustedForwarder\\n    ) ERC2771Context(trustedForwarder) {\\n        if (_creator == address(0) || _goal == 0) revert InvalidParam();\\n        if (_isNative) {\\n            if (address(_asset) != address(0)) revert InvalidParam();\\n        } else {\\n            if (address(_asset) == address(0)) revert InvalidParam();\\n        }\\n        creator = _creator;\\n        asset = _asset;\\n        isNative = _isNative;\\n        goal = _goal;\\n        name = _name;\\n    }\\n\\n    // Views\\n    function assetBalance() public view returns (uint256) {\\n        return isNative ? address(this).balance : asset.balanceOf(address(this));\\n    }\\n\\n    function canWithdraw() public view returns (bool) {\\n        return !isWithdrawn && assetBalance() >= goal;\\n    }\\n\\n\\n    /// @notice Contribute ERC20 (only for ERC20 vaults). Caller must have approved OR use permit helper.\\n    function contribute(uint256 amount) external nonReentrant {\\n        if (isNative) revert WrongAsset();\\n        if (amount == 0) revert ZeroAmount();\\n        asset.safeTransferFrom(_msgSender(), address(this), amount);\\n        uint256 bal = asset.balanceOf(address(this));\\n        emit Deposited(_msgSender(), amount, bal, false);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    /// @notice Contribute ERC20 using EIP-2612 permit in the same (meta-)tx.\\n    function contributeWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v, bytes32 r, bytes32 s\\n    ) external nonReentrant {\\n        if (isNative) revert WrongAsset();\\n        if (amount == 0) revert ZeroAmount();\\n        IERC20Permit(address(asset)).permit(_msgSender(), address(this), amount, deadline, v, r, s);\\n        asset.safeTransferFrom(_msgSender(), address(this), amount);\\n        uint256 bal = asset.balanceOf(address(this));\\n        emit Deposited(_msgSender(), amount, bal, false);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    /// @notice Contribute native MON via explicit function (use this for meta-tx).\\n    function contributeNative() external payable nonReentrant {\\n        if (!isNative) revert WrongAsset();\\n        if (msg.value == 0) revert ZeroAmount();\\n        uint256 bal = address(this).balance;\\n        emit Deposited(_msgSender(), msg.value, bal, true);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    /// @notice Bare receives are allowed for normal EOAs only (not via forwarder).\\n    receive() external payable {\\n        if (!isNative) revert WrongAsset();\\n        // If this comes via a forwarder, calldata will be non-empty \\u2192 it would hit fallback (not defined) and revert.\\n        // Normal EOAs (no calldata) hit receive() and are accepted:\\n        if (msg.value == 0) revert ZeroAmount();\\n        uint256 bal = address(this).balance;\\n        emit Deposited(msg.sender, msg.value, bal, true); // raw sender for direct sends\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n\\n    function withdraw() external nonReentrant {\\n        if (_msgSender() != creator) revert NotCreator();\\n        if (isWithdrawn) revert AlreadyWithdrawn();\\n\\n        uint256 bal = assetBalance();\\n        if (bal < goal) revert GoalNotReached();\\n\\n        isWithdrawn = true;\\n\\n        if (isNative) {\\n            (bool ok, ) = payable(creator).call{value: bal}(\\\"\\\");\\n            require(ok, \\\"native transfer failed\\\");\\n            emit Withdrawn(creator, bal, true);\\n        } else {\\n            asset.safeTransfer(creator, bal);\\n            emit Withdrawn(creator, bal, false);\\n        }\\n    }\\n\\n    function _msgSender() internal view override returns (address s) {\\n        return ERC2771Context._msgSender();\\n    }\\n    function _msgData() internal view override returns (bytes calldata d) {\\n        return ERC2771Context._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x09f4b55d8c007abb2ac15f4ba35651ddd19fbd2348588158b4ce01c46531b86e\",\"license\":\"MIT\"},\"contracts/VaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC2771Context} from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\ncontract VaultFactory is ERC2771Context {\\n    event VaultCreated(\\n        address indexed creator,\\n        address vault,\\n        address indexed asset,\\n        bool isNative,\\n        uint256 goal,\\n        string name\\n    );\\n\\n    mapping(address => address[]) private _creatorVaults;\\n    address[] private _allVaults;\\n\\n    address public immutable forwarder;\\n\\n    constructor(address _forwarder) ERC2771Context(_forwarder) {\\n        require(_forwarder != address(0), \\\"forwarder=0\\\");\\n        forwarder = _forwarder;\\n    }\\n\\n    function createVaultERC20(IERC20 asset, uint256 goal, string calldata name)\\n        external\\n        returns (address vault)\\n    {\\n        address creator = _msgSender();\\n        vault = address(new Vault(creator, asset, false, goal, name, forwarder));\\n        _creatorVaults[creator].push(vault);\\n        _allVaults.push(vault);\\n        emit VaultCreated(creator, vault, address(asset), false, goal, name);\\n    }\\n\\n    function createVaultNative(uint256 goal, string calldata name)\\n        external\\n        returns (address vault)\\n    {\\n        address creator = _msgSender();\\n        vault = address(new Vault(creator, IERC20(address(0)), true, goal, name, forwarder));\\n        _creatorVaults[creator].push(vault);\\n        _allVaults.push(vault);\\n        emit VaultCreated(creator, vault, address(0), true, goal, name);\\n    }\\n\\n    function getCreatorVaults(address creator) external view returns (address[] memory) {\\n        return _creatorVaults[creator];\\n    }\\n\\n    function allVaultsLength() external view returns (uint256) {\\n        return _allVaults.length;\\n    }\\n\\n    function allVaults(uint256 i) external view returns (address) {\\n        return _allVaults[i];\\n    }\\n\\n    // Required overrides (explicit)\\n    function _msgSender() internal view override returns (address s) {\\n        return ERC2771Context._msgSender();\\n    }\\n    function _msgData() internal view override returns (bytes calldata d) {\\n        return ERC2771Context._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x41b11fd65c92097ed94f057eb2089a356a217bb632516a9db20e095d0abc7111\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC-2771 support.\\n *\\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC-2771\\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\\n * function only accessible if `msg.data.length == 0`.\\n *\\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\\n * recovery.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /**\\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\\n     * invoke functions on this contract on behalf of other accounts.\\n     *\\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder_) {\\n        _trustedForwarder = trustedForwarder_;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the trusted forwarder.\\n     */\\n    function trustedForwarder() public view virtual returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any particular address is the trusted forwarder.\\n     */\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == trustedForwarder();\\n    }\\n\\n    /**\\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgSender() internal view virtual override returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (calldataLength >= contextSuffixLength && isTrustedForwarder(msg.sender)) {\\n            unchecked {\\n                return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /**\\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (calldataLength >= contextSuffixLength && isTrustedForwarder(msg.sender)) {\\n            unchecked {\\n                return msg.data[:calldataLength - contextSuffixLength];\\n            }\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\\n        return 20;\\n    }\\n}\\n\",\"keccak256\":\"0x345acfb731203002ef98916d5a222339709db0ad44dc4a389e7f1ce4088ce59b\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_forwarder","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"creator","type":"address","indexed":true},{"internalType":"address","name":"vault","type":"address","indexed":false},{"internalType":"address","name":"asset","type":"address","indexed":true},{"internalType":"bool","name":"isNative","type":"bool","indexed":false},{"internalType":"uint256","name":"goal","type":"uint256","indexed":false},{"internalType":"string","name":"name","type":"string","indexed":false}],"type":"event","name":"VaultCreated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"i","type":"uint256"}],"stateMutability":"view","type":"function","name":"allVaults","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"allVaultsLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC20","name":"asset","type":"address"},{"internalType":"uint256","name":"goal","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"createVaultERC20","outputs":[{"internalType":"address","name":"vault","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"goal","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"createVaultNative","outputs":[{"internalType":"address","name":"vault","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"forwarder","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"creator","type":"address"}],"stateMutability":"view","type":"function","name":"getCreatorVaults","outputs":[{"internalType":"address[]","name":"","type":"address[]"}]},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"stateMutability":"view","type":"function","name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"trustedForwarder","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"isTrustedForwarder(address)":{"details":"Indicates whether any particular address is the trusted forwarder."},"trustedForwarder()":{"details":"Returns the address of the trusted forwarder."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","forge-std/=node_modules/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/VaultFactory.sol":"VaultFactory"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/Vault.sol":{"keccak256":"0x09f4b55d8c007abb2ac15f4ba35651ddd19fbd2348588158b4ce01c46531b86e","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { ERC2771Context } from \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\n\ninterface IERC20Permit {\n    function permit(\n        address owner, address spender, uint256 value,\n        uint256 deadline, uint8 v, bytes32 r, bytes32 s\n    ) external;\n}\n\n/**\n * @title Vault\n * @notice Holds either ONE ERC20 or native MON. Meta-tx aware via ERC2771.\n */\ncontract Vault is ReentrancyGuard, ERC2771Context {\n    using SafeERC20 for IERC20;\n\n    address public immutable creator;\n    IERC20  public immutable asset;      \n    bool    public immutable isNative;   \n    uint256 public immutable goal;      \n    string  public name;\n\n    // State\n    bool public isWithdrawn;\n\n    // Events\n    event Deposited(address indexed from, uint256 amount, uint256 newBalance, bool isNative);\n    event GoalReached(uint256 timestamp, uint256 balance);\n    event Withdrawn(address indexed to, uint256 amount, bool isNative);\n\n    // Errors\n    error NotCreator();\n    error GoalNotReached();\n    error AlreadyWithdrawn();\n    error InvalidParam();\n    error ZeroAmount();\n    error WrongAsset();\n\n    constructor(\n        address _creator,\n        IERC20 _asset,           \n        bool _isNative,\n        uint256 _goal,\n        string memory _name,\n        address trustedForwarder\n    ) ERC2771Context(trustedForwarder) {\n        if (_creator == address(0) || _goal == 0) revert InvalidParam();\n        if (_isNative) {\n            if (address(_asset) != address(0)) revert InvalidParam();\n        } else {\n            if (address(_asset) == address(0)) revert InvalidParam();\n        }\n        creator = _creator;\n        asset = _asset;\n        isNative = _isNative;\n        goal = _goal;\n        name = _name;\n    }\n\n    // Views\n    function assetBalance() public view returns (uint256) {\n        return isNative ? address(this).balance : asset.balanceOf(address(this));\n    }\n\n    function canWithdraw() public view returns (bool) {\n        return !isWithdrawn && assetBalance() >= goal;\n    }\n\n\n    /// @notice Contribute ERC20 (only for ERC20 vaults). Caller must have approved OR use permit helper.\n    function contribute(uint256 amount) external nonReentrant {\n        if (isNative) revert WrongAsset();\n        if (amount == 0) revert ZeroAmount();\n        asset.safeTransferFrom(_msgSender(), address(this), amount);\n        uint256 bal = asset.balanceOf(address(this));\n        emit Deposited(_msgSender(), amount, bal, false);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    /// @notice Contribute ERC20 using EIP-2612 permit in the same (meta-)tx.\n    function contributeWithPermit(\n        uint256 amount,\n        uint256 deadline,\n        uint8 v, bytes32 r, bytes32 s\n    ) external nonReentrant {\n        if (isNative) revert WrongAsset();\n        if (amount == 0) revert ZeroAmount();\n        IERC20Permit(address(asset)).permit(_msgSender(), address(this), amount, deadline, v, r, s);\n        asset.safeTransferFrom(_msgSender(), address(this), amount);\n        uint256 bal = asset.balanceOf(address(this));\n        emit Deposited(_msgSender(), amount, bal, false);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    /// @notice Contribute native MON via explicit function (use this for meta-tx).\n    function contributeNative() external payable nonReentrant {\n        if (!isNative) revert WrongAsset();\n        if (msg.value == 0) revert ZeroAmount();\n        uint256 bal = address(this).balance;\n        emit Deposited(_msgSender(), msg.value, bal, true);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    /// @notice Bare receives are allowed for normal EOAs only (not via forwarder).\n    receive() external payable {\n        if (!isNative) revert WrongAsset();\n        // If this comes via a forwarder, calldata will be non-empty → it would hit fallback (not defined) and revert.\n        // Normal EOAs (no calldata) hit receive() and are accepted:\n        if (msg.value == 0) revert ZeroAmount();\n        uint256 bal = address(this).balance;\n        emit Deposited(msg.sender, msg.value, bal, true); // raw sender for direct sends\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n\n    function withdraw() external nonReentrant {\n        if (_msgSender() != creator) revert NotCreator();\n        if (isWithdrawn) revert AlreadyWithdrawn();\n\n        uint256 bal = assetBalance();\n        if (bal < goal) revert GoalNotReached();\n\n        isWithdrawn = true;\n\n        if (isNative) {\n            (bool ok, ) = payable(creator).call{value: bal}(\"\");\n            require(ok, \"native transfer failed\");\n            emit Withdrawn(creator, bal, true);\n        } else {\n            asset.safeTransfer(creator, bal);\n            emit Withdrawn(creator, bal, false);\n        }\n    }\n\n    function _msgSender() internal view override returns (address s) {\n        return ERC2771Context._msgSender();\n    }\n    function _msgData() internal view override returns (bytes calldata d) {\n        return ERC2771Context._msgData();\n    }\n}\n","license":"MIT"},"contracts/VaultFactory.sol":{"keccak256":"0x41b11fd65c92097ed94f057eb2089a356a217bb632516a9db20e095d0abc7111","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ERC2771Context} from \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\nimport {Vault} from \"./Vault.sol\";\n\ncontract VaultFactory is ERC2771Context {\n    event VaultCreated(\n        address indexed creator,\n        address vault,\n        address indexed asset,\n        bool isNative,\n        uint256 goal,\n        string name\n    );\n\n    mapping(address => address[]) private _creatorVaults;\n    address[] private _allVaults;\n\n    address public immutable forwarder;\n\n    constructor(address _forwarder) ERC2771Context(_forwarder) {\n        require(_forwarder != address(0), \"forwarder=0\");\n        forwarder = _forwarder;\n    }\n\n    function createVaultERC20(IERC20 asset, uint256 goal, string calldata name)\n        external\n        returns (address vault)\n    {\n        address creator = _msgSender();\n        vault = address(new Vault(creator, asset, false, goal, name, forwarder));\n        _creatorVaults[creator].push(vault);\n        _allVaults.push(vault);\n        emit VaultCreated(creator, vault, address(asset), false, goal, name);\n    }\n\n    function createVaultNative(uint256 goal, string calldata name)\n        external\n        returns (address vault)\n    {\n        address creator = _msgSender();\n        vault = address(new Vault(creator, IERC20(address(0)), true, goal, name, forwarder));\n        _creatorVaults[creator].push(vault);\n        _allVaults.push(vault);\n        emit VaultCreated(creator, vault, address(0), true, goal, name);\n    }\n\n    function getCreatorVaults(address creator) external view returns (address[] memory) {\n        return _creatorVaults[creator];\n    }\n\n    function allVaultsLength() external view returns (uint256) {\n        return _allVaults.length;\n    }\n\n    function allVaults(uint256 i) external view returns (address) {\n        return _allVaults[i];\n    }\n\n    // Required overrides (explicit)\n    function _msgSender() internal view override returns (address s) {\n        return ERC2771Context._msgSender();\n    }\n    function _msgData() internal view override returns (bytes calldata d) {\n        return ERC2771Context._msgData();\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol":{"keccak256":"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC165.sol":{"keccak256":"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol":{"keccak256":"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n","license":"MIT"},"node_modules/@openzeppelin/contracts/metatx/ERC2771Context.sol":{"keccak256":"0x345acfb731203002ef98916d5a222339709db0ad44dc4a389e7f1ce4088ce59b","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Context variant with ERC-2771 support.\n *\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC-2771\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\n * function only accessible if `msg.data.length == 0`.\n *\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\n * recovery.\n */\nabstract contract ERC2771Context is Context {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n\n    /**\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\n     * invoke functions on this contract on behalf of other accounts.\n     *\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\n     */\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address trustedForwarder_) {\n        _trustedForwarder = trustedForwarder_;\n    }\n\n    /**\n     * @dev Returns the address of the trusted forwarder.\n     */\n    function trustedForwarder() public view virtual returns (address) {\n        return _trustedForwarder;\n    }\n\n    /**\n     * @dev Indicates whether any particular address is the trusted forwarder.\n     */\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == trustedForwarder();\n    }\n\n    /**\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n    function _msgSender() internal view virtual override returns (address) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (calldataLength >= contextSuffixLength && isTrustedForwarder(msg.sender)) {\n            unchecked {\n                return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    /**\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (calldataLength >= contextSuffixLength && isTrustedForwarder(msg.sender)) {\n            unchecked {\n                return msg.data[:calldataLength - contextSuffixLength];\n            }\n        } else {\n            return super._msgData();\n        }\n    }\n\n    /**\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\n     */\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\n        return 20;\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/utils/Context.sol":{"keccak256":"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n","license":"MIT"}},"version":1},"id":1}