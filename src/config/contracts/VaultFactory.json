{"abi":[{"type":"function","name":"allVaults","inputs":[{"name":"i","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"allVaultsLength","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"createVaultERC20","inputs":[{"name":"asset","type":"address","internalType":"contract IERC20"},{"name":"goal","type":"uint256","internalType":"uint256"},{"name":"name","type":"string","internalType":"string"}],"outputs":[{"name":"vault","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"createVaultNative","inputs":[{"name":"goal","type":"uint256","internalType":"uint256"},{"name":"name","type":"string","internalType":"string"}],"outputs":[{"name":"vault","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"getCreatorVaults","inputs":[{"name":"creator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"VaultCreated","inputs":[{"name":"creator","type":"address","indexed":true,"internalType":"address"},{"name":"vault","type":"address","indexed":false,"internalType":"address"},{"name":"asset","type":"address","indexed":true,"internalType":"address"},{"name":"isNative","type":"bool","indexed":false,"internalType":"bool"},{"name":"goal","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"name","type":"string","indexed":false,"internalType":"string"}],"anonymous":false}],"bytecode":{"object":"","sourceMap":"258:1550:1:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b50600436106100575760003560e01c80634cd185771461005c578063674e9ca2146100725780639094a91e146100925780639a543d82146100bd578063c0ffcf8d146100d0575b600080fd5b6001546040519081526020015b60405180910390f35b6100856100803660046103b0565b6100e3565b60405161006991906103d4565b6100a56100a0366004610420565b610157565b6040516001600160a01b039091168152602001610069565b6100a56100cb366004610482565b610187565b6100a56100de3660046104de565b61028b565b6001600160a01b0381166000908152602081815260409182902080548351818402810184019094528084526060939283018282801561014b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161012d575b50505050509050919050565b60006001828154811061016c5761016c61052a565b6000918252602090912001546001600160a01b031692915050565b60003385600086868660405161019c9061038b565b6101ab96959493929190610569565b604051809103906000f0801580156101c7573d6000803e3d6000fd5b503360008181526020818152604080832080546001818101835591855292842090920180546001600160a01b038088166001600160a01b03199283168117909355845480860186559486527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690940180549091169091179055519394508816927fdc341d3bc7b547adc28dc5fd69fd2ac058a6a5938cf499dcd2c7db3f80f374c59161027b918691908a908a908a906105b1565b60405180910390a3949350505050565b600033600060018686866040516102a19061038b565b6102b096959493929190610569565b604051809103906000f0801580156102cc573d6000803e3d6000fd5b503360008181526020818152604080832080546001818101835591855292842090920180546001600160a01b0387166001600160a01b03199182168117909255835480850185558486527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805490911690911790555193945090927fdc341d3bc7b547adc28dc5fd69fd2ac058a6a5938cf499dcd2c7db3f80f374c59161037c918691908a908a908a906105b1565b60405180910390a39392505050565b61114c806105ed83390190565b6001600160a01b03811681146103ad57600080fd5b50565b6000602082840312156103c257600080fd5b81356103cd81610398565b9392505050565b602080825282518282018190526000918401906040840190835b818110156104155783516001600160a01b03168352602093840193909201916001016103ee565b509095945050505050565b60006020828403121561043257600080fd5b5035919050565b60008083601f84011261044b57600080fd5b50813567ffffffffffffffff81111561046357600080fd5b60208301915083602082850101111561047b57600080fd5b9250929050565b6000806000806060858703121561049857600080fd5b84356104a381610398565b935060208501359250604085013567ffffffffffffffff8111156104c657600080fd5b6104d287828801610439565b95989497509550505050565b6000806000604084860312156104f357600080fd5b83359250602084013567ffffffffffffffff81111561051157600080fd5b61051d86828701610439565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0387811682528616602082015284151560408201526060810184905260a0608082018190526000906105a59083018486610540565b98975050505050505050565b60018060a01b038616815284151560208201528360408201526080606082015260006105e1608083018486610540565b97965050505050505056fe61010060405260405161114c38038061114c83398101604081905261002391610117565b60016000556001600160a01b038516158061003c575081155b1561005a57604051633494a40d60e21b815260040160405180910390fd5b821561008d576001600160a01b0384161561008857604051633494a40d60e21b815260040160405180910390fd5b6100b4565b6001600160a01b0384166100b457604051633494a40d60e21b815260040160405180910390fd5b6001600160a01b03808616608052841660a05282151560c05260e082905260016100de82826102b6565b505050505050610374565b6001600160a01b03811681146100fe57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a0868803121561012f57600080fd5b855161013a816100e9565b602087015190955061014b816100e9565b6040870151909450801515811461016157600080fd5b6060870151608088015191945092506001600160401b0381111561018457600080fd5b8601601f8101881361019557600080fd5b80516001600160401b038111156101ae576101ae610101565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101dc576101dc610101565b6040528181528282016020018a10156101f457600080fd5b60005b82811015610213576020818501810151838301820152016101f7565b506000602083830101528093505050509295509295909350565b600181811c9082168061024157607f821691505b60208210810361026157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102b157806000526020600020601f840160051c8101602085101561028e5750805b601f840160051c820191505b818110156102ae576000815560010161029a565b50505b505050565b81516001600160401b038111156102cf576102cf610101565b6102e3816102dd845461022d565b84610267565b6020601f82116001811461031757600083156102ff5750848201515b600019600385901b1c1916600184901b1784556102ae565b600084815260208120601f198516915b828110156103475787850151825560209485019460019092019101610327565b50848210156103655786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60805160a05160c05160e051610d1b6104316000396000818161015801528181610297015281816104b8015281816105aa0152818161081d01526109c901526000818160a70152818161030301528181610407015281816105f8015281816108560152610a3d01526000818161024e01528181610754015281816108c1015281816109010152610a750152600081816101d30152818161053a01528181610620015281816106f50152818161077601526107b30152610d1b6000f3fe6080604052600436106100a05760003560e01c80634019388311610064578063401938831461028557806344aa5700146102c757806373cfc6b2146102f1578063b51459fe14610325578063c1cbbca71461033a578063c66f24551461035a57600080fd5b806302d05d3f146101c157806306fdde03146102125780631f6899351461023457806338d52e0f1461023c5780633ccfd60b1461027057600080fd5b366101bc577f00000000000000000000000000000000000000000000000000000000000000006100e35760405163f170c67f60e01b815260040160405180910390fd5b3460000361010457604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40919081900360600190a260025460ff1615801561017b57507f00000000000000000000000000000000000000000000000000000000000000008110155b156101ba5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b005b600080fd5b3480156101cd57600080fd5b506101f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021e57600080fd5b5061022761036f565b6040516102099190610c2b565b6101ba6103fd565b34801561024857600080fd5b506101f57f000000000000000000000000000000000000000000000000000000000000000081565b34801561027c57600080fd5b506101ba610527565b34801561029157600080fd5b506102b97f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610209565b3480156102d357600080fd5b506002546102e19060ff1681565b6040519015158152602001610209565b3480156102fd57600080fd5b506102e17f000000000000000000000000000000000000000000000000000000000000000081565b34801561033157600080fd5b506102e161080a565b34801561034657600080fd5b506101ba610355366004610c79565b61084c565b34801561036657600080fd5b506102b9610a39565b6001805461037c90610c92565b80601f01602080910402602001604051908101604052809291908181526020018280546103a890610c92565b80156103f55780601f106103ca576101008083540402835291602001916103f5565b820191906000526020600020905b8154815290600101906020018083116103d857829003601f168201915b505050505081565b610405610aed565b7f00000000000000000000000000000000000000000000000000000000000000006104435760405163f170c67f60e01b815260040160405180910390fd5b3460000361046457604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40919081900360600190a260025460ff161580156104db57507f00000000000000000000000000000000000000000000000000000000000000008110155b1561051a5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b506105256001600055565b565b61052f610aed565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610578576040516393687c0b60e01b815260040160405180910390fd5b60025460ff161561059c57604051636507689f60e01b815260040160405180910390fd5b60006105a6610a39565b90507f00000000000000000000000000000000000000000000000000000000000000008110156105e9576040516378c754c960e01b815260040160405180910390fd5b6002805460ff191660011790557f0000000000000000000000000000000000000000000000000000000000000000156107475760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610689576040519150601f19603f3d011682016040523d82523d6000602084013e61068e565b606091505b50509050806106dd5760405162461bcd60e51b81526020600482015260166024820152751b985d1a5d99481d1c985b9cd9995c8819985a5b195960521b60448201526064015b60405180910390fd5b60408051838152600160208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a25061051a565b61079b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610b17565b60408051828152600060208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a2506105256001600055565b60025460009060ff1615801561084757507f0000000000000000000000000000000000000000000000000000000000000000610844610a39565b10155b905090565b610854610aed565b7f0000000000000000000000000000000000000000000000000000000000000000156108935760405163f170c67f60e01b815260040160405180910390fd5b806000036108b457604051631f2a200560e01b815260040160405180910390fd5b6108e96001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610b7b565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190610ccc565b6040805184815260208101839052600081830152905191925033917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c409181900360600190a260025460ff161580156109ec57507f00000000000000000000000000000000000000000000000000000000000000008110155b15610a2b5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b50610a366001600055565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000610ae8576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108479190610ccc565b504790565b600260005403610b1057604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b03838116602483015260448201839052610b7691859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610bba565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610bb49186918216906323b872dd90608401610b44565b50505050565b600080602060008451602086016000885af180610bdd576040513d6000823e3d81fd5b50506000513d91508115610bf5578060011415610c02565b6001600160a01b0384163b155b15610bb457604051635274afe760e01b81526001600160a01b03851660048201526024016106d4565b602081526000825180602084015260005b81811015610c595760208186018101516040868401015201610c3c565b506000604082850101526040601f19601f83011684010191505092915050565b600060208284031215610c8b57600080fd5b5035919050565b600181811c90821680610ca657607f821691505b602082108103610cc657634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610cde57600080fd5b505191905056fea2646970667358221220f02d1bfa89d8c5271b7cbf800f845dcda7e476de177868c2b0747d15f156c58164736f6c634300081c0033a26469706673582212204c8203de84f5bf54eede316e71ca7540c5ef595bda9339c18832892f8d13364664736f6c634300081c0033","sourceMap":"258:1550:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1601:100;1677:10;:17;1601:100;;160:25:29;;;148:2;133:18;1601:100:1;;;;;;;;1464:131;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1707:99::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1621:32:29;;;1603:51;;1591:2;1576:18;1707:99:1;1457:203:29;642:371:1;;;;;;:::i;:::-;;:::i;1093:365::-;;;;;;:::i;:::-;;:::i;1464:131::-;-1:-1:-1;;;;;1565:23:1;;:14;:23;;;;;;;;;;;;1558:30;;;;;;;;;;;;;;;;;1530:16;;1558:30;;;1565:23;1558:30;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1558:30:1;;;;;;;;;;;;;;;;;;;;;;;1464:131;;;:::o;1707:99::-;1760:7;1786:10;1797:1;1786:13;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;1786:13:1;;1707:99;-1:-1:-1;;1707:99:1:o;642:371::-;752:13;807:10;819:5;826;833:4;839;;797:47;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;870:10:1;855:14;:26;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;855:38:1;;;-1:-1:-1;;;;;;855:38:1;;;;;;;;903:22;;;;;;;;;;;;;;;;;;;;;;;;940:66;781:64;;-1:-1:-1;940:66:1;;;;;;;781:64;;855:14;995:4;;1001;;;;940:66;:::i;:::-;;;;;;;;642:371;;;;;;:::o;1093:365::-;1190:13;1245:10;1272:1;1277:4;1283;1289;;1235:59;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1320:10:1;1305:14;:26;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1305:38:1;;-1:-1:-1;;;;;;1305:38:1;;;;;;;;1353:22;;;;;;;;;;;;;;;;;;;;;;1390:61;1219:76;;-1:-1:-1;1305:14:1;;1390:61;;;;1219:76;;1305:38;1440:4;;1446;;;;1390:61;:::i;:::-;;;;;;;;1093:365;;;;;:::o;-1:-1:-1:-;;;;;;;;:::o;196:131:29:-;-1:-1:-1;;;;;271:31:29;;261:42;;251:70;;317:1;314;307:12;251:70;196:131;:::o;332:247::-;391:6;444:2;432:9;423:7;419:23;415:32;412:52;;;460:1;457;450:12;412:52;499:9;486:23;518:31;543:5;518:31;:::i;:::-;568:5;332:247;-1:-1:-1;;;332:247:29:o;584:637::-;774:2;786:21;;;856:13;;759:18;;;878:22;;;726:4;;957:15;;;931:2;916:18;;;726:4;1000:195;1014:6;1011:1;1008:13;1000:195;;;1079:13;;-1:-1:-1;;;;;1075:39:29;1063:52;;1144:2;1170:15;;;;1135:12;;;;1111:1;1029:9;1000:195;;;-1:-1:-1;1212:3:29;;584:637;-1:-1:-1;;;;;584:637:29:o;1226:226::-;1285:6;1338:2;1326:9;1317:7;1313:23;1309:32;1306:52;;;1354:1;1351;1344:12;1306:52;-1:-1:-1;1399:23:29;;1226:226;-1:-1:-1;1226:226:29:o;1665:348::-;1717:8;1727:6;1781:3;1774:4;1766:6;1762:17;1758:27;1748:55;;1799:1;1796;1789:12;1748:55;-1:-1:-1;1822:20:29;;1865:18;1854:30;;1851:50;;;1897:1;1894;1887:12;1851:50;1934:4;1926:6;1922:17;1910:29;;1986:3;1979:4;1970:6;1962;1958:19;1954:30;1951:39;1948:59;;;2003:1;2000;1993:12;1948:59;1665:348;;;;;:::o;2018:680::-;2121:6;2129;2137;2145;2198:2;2186:9;2177:7;2173:23;2169:32;2166:52;;;2214:1;2211;2204:12;2166:52;2253:9;2240:23;2272:31;2297:5;2272:31;:::i;:::-;2322:5;-1:-1:-1;2400:2:29;2385:18;;2372:32;;-1:-1:-1;2481:2:29;2466:18;;2453:32;2508:18;2497:30;;2494:50;;;2540:1;2537;2530:12;2494:50;2579:59;2630:7;2621:6;2610:9;2606:22;2579:59;:::i;:::-;2018:680;;;;-1:-1:-1;2657:8:29;-1:-1:-1;;;;2018:680:29:o;2703:525::-;2783:6;2791;2799;2852:2;2840:9;2831:7;2827:23;2823:32;2820:52;;;2868:1;2865;2858:12;2820:52;2913:23;;;-1:-1:-1;3011:2:29;2996:18;;2983:32;3038:18;3027:30;;3024:50;;;3070:1;3067;3060:12;3024:50;3109:59;3160:7;3151:6;3140:9;3136:22;3109:59;:::i;:::-;2703:525;;3187:8;;-1:-1:-1;3083:85:29;;-1:-1:-1;;;;2703:525:29:o;3233:127::-;3294:10;3289:3;3285:20;3282:1;3275:31;3325:4;3322:1;3315:15;3349:4;3346:1;3339:15;3365:267;3454:6;3449:3;3442:19;3506:6;3499:5;3492:4;3487:3;3483:14;3470:43;-1:-1:-1;3558:1:29;3533:16;;;3551:4;3529:27;;;3522:38;;;;3614:2;3593:15;;;-1:-1:-1;;3589:29:29;3580:39;;;3576:50;;3365:267::o;3637:610::-;-1:-1:-1;;;;;3916:32:29;;;3898:51;;3985:32;;3980:2;3965:18;;3958:60;4061:14;;4054:22;4049:2;4034:18;;4027:50;4108:2;4093:18;;4086:34;;;3936:3;4151;4136:19;;4129:32;;;-1:-1:-1;;4178:63:29;;4221:19;;4213:6;4205;4178:63;:::i;:::-;4170:71;3637:610;-1:-1:-1;;;;;;;;3637:610:29:o;4252:498::-;4518:1;4514;4509:3;4505:11;4501:19;4493:6;4489:32;4478:9;4471:51;4572:6;4565:14;4558:22;4553:2;4542:9;4538:18;4531:50;4617:6;4612:2;4601:9;4597:18;4590:34;4660:3;4655:2;4644:9;4640:18;4633:31;4452:4;4681:63;4739:3;4728:9;4724:19;4716:6;4708;4681:63;:::i;:::-;4673:71;4252:498;-1:-1:-1;;;;;;;4252:498:29:o","linkReferences":{}},"methodIdentifiers":{"allVaults(uint256)":"9094a91e","allVaultsLength()":"4cd18577","createVaultERC20(address,uint256,string)":"9a543d82","createVaultNative(uint256,string)":"c0ffcf8d","getCreatorVaults(address)":"674e9ca2"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"allVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allVaultsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createVaultERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createVaultNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreatorVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createVaultNative(uint256,string)\":{\"details\":\"`goal` is in wei.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createVaultERC20(address,uint256,string)\":{\"notice\":\"Create an ERC20-denominated vault.\"},\"createVaultNative(uint256,string)\":{\"notice\":\"Create a native MON vault.\"}},\"notice\":\"Deploys vaults that hold either ERC20 OR native MON (chosen at creation).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultFactory.sol\":\"VaultFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":forge-std/=node_modules/forge-std/src/\"]},\"sources\":{\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Vault\\n * @notice Vault holds either ONE ERC20 or native MON, chosen at deploy.\\n *         Anyone can contribute the chosen asset. Only creator can withdraw,\\n *         and only after balance >= goal. One-shot withdraw closes the vault.\\n */\\ncontract Vault is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Immutable config\\n    address public immutable creator;\\n    IERC20  public immutable asset;      // zero when isNative == true\\n    bool    public immutable isNative;   // true => native MON vault\\n    uint256 public immutable goal;       // token units or wei (if native)\\n    string  public name;\\n\\n    // State\\n    bool public isWithdrawn;\\n\\n    // Events\\n    event Deposited(address indexed from, uint256 amount, uint256 newBalance, bool isNative);\\n    event GoalReached(uint256 timestamp, uint256 balance);\\n    event Withdrawn(address indexed to, uint256 amount, bool isNative);\\n\\n    // Errors\\n    error NotCreator();\\n    error GoalNotReached();\\n    error AlreadyWithdrawn();\\n    error InvalidParam();\\n    error ZeroAmount();\\n    error WrongAsset(); // sending wrong asset type\\n\\n    constructor(\\n        address _creator,\\n        IERC20 _asset,           // set to IERC20(address(0)) if native\\n        bool _isNative,\\n        uint256 _goal,\\n        string memory _name\\n    ) payable {\\n        // Invariants:\\n        // - if native: asset must be zero\\n        // - if ERC20 : asset must be non-zero\\n        if (_creator == address(0) || _goal == 0) revert InvalidParam();\\n        if (_isNative) {\\n            if (address(_asset) != address(0)) revert InvalidParam();\\n        } else {\\n            if (address(_asset) == address(0)) revert InvalidParam();\\n        }\\n        creator = _creator;\\n        asset = _asset;\\n        isNative = _isNative;\\n        goal = _goal;\\n        name = _name;\\n    }\\n\\n    // Views\\n    function assetBalance() public view returns (uint256) {\\n        return isNative ? address(this).balance : asset.balanceOf(address(this));\\n    }\\n\\n    function canWithdraw() public view returns (bool) {\\n        return !isWithdrawn && assetBalance() >= goal;\\n    }\\n\\n    // ---- Contributions ----\\n\\n    /// @notice Contribute ERC20 (only for ERC20 vaults). Caller must have approved this contract.\\n    function contribute(uint256 amount) external nonReentrant {\\n        if (isNative) revert WrongAsset();\\n        if (amount == 0) revert ZeroAmount();\\n        asset.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 bal = asset.balanceOf(address(this));\\n        emit Deposited(msg.sender, amount, bal, false);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    /// @notice Contribute native MON (only for native vaults).\\n    receive() external payable {\\n        if (!isNative) revert WrongAsset();\\n        if (msg.value == 0) revert ZeroAmount();\\n        uint256 bal = address(this).balance;\\n        emit Deposited(msg.sender, msg.value, bal, true);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    /// @notice Explicit payable function (same as receive) for UIs.\\n    function contributeNative() external payable nonReentrant {\\n        if (!isNative) revert WrongAsset();\\n        if (msg.value == 0) revert ZeroAmount();\\n        uint256 bal = address(this).balance;\\n        emit Deposited(msg.sender, msg.value, bal, true);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    // ---- Withdraw ----\\n\\n    function withdraw() external nonReentrant {\\n        if (msg.sender != creator) revert NotCreator();\\n        if (isWithdrawn) revert AlreadyWithdrawn();\\n\\n        uint256 bal = assetBalance();\\n        if (bal < goal) revert GoalNotReached();\\n\\n        isWithdrawn = true;\\n\\n        if (isNative) {\\n            (bool ok, ) = payable(creator).call{value: bal}(\\\"\\\");\\n            require(ok, \\\"native transfer failed\\\");\\n            emit Withdrawn(creator, bal, true);\\n        } else {\\n            asset.safeTransfer(creator, bal);\\n            emit Withdrawn(creator, bal, false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9eed3705eacf041870f33ce83a228cc98ea8d25f290b0cfbdf10480d227aa735\",\"license\":\"MIT\"},\"contracts/VaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\n/**\\n * @notice Deploys vaults that hold either ERC20 OR native MON (chosen at creation).\\n */\\ncontract VaultFactory {\\n    event VaultCreated(\\n        address indexed creator,\\n        address vault,\\n        address indexed asset, // zero address when native\\n        bool isNative,\\n        uint256 goal,\\n        string name\\n    );\\n\\n    mapping(address => address[]) private _creatorVaults;\\n    address[] private _allVaults;\\n\\n    /// @notice Create an ERC20-denominated vault.\\n    function createVaultERC20(IERC20 asset, uint256 goal, string calldata name)\\n        external\\n        returns (address vault)\\n    {\\n        vault = address(new Vault(msg.sender, asset, false, goal, name));\\n        _creatorVaults[msg.sender].push(vault);\\n        _allVaults.push(vault);\\n        emit VaultCreated(msg.sender, vault, address(asset), false, goal, name);\\n    }\\n\\n    /// @notice Create a native MON vault.\\n    /// @dev `goal` is in wei.\\n    function createVaultNative(uint256 goal, string calldata name)\\n        external\\n        returns (address vault)\\n    {\\n        vault = address(new Vault(msg.sender, IERC20(address(0)), true, goal, name));\\n        _creatorVaults[msg.sender].push(vault);\\n        _allVaults.push(vault);\\n        emit VaultCreated(msg.sender, vault, address(0), true, goal, name);\\n    }\\n\\n    function getCreatorVaults(address creator) external view returns (address[] memory) {\\n        return _creatorVaults[creator];\\n    }\\n\\n    function allVaultsLength() external view returns (uint256) {\\n        return _allVaults.length;\\n    }\\n\\n    function allVaults(uint256 i) external view returns (address) {\\n        return _allVaults[i];\\n    }\\n}\\n\",\"keccak256\":\"0x0a234aabef844345898e67ea86374ae7ed6cf581213e882f10abc405f3d32ce5\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"creator","type":"address","indexed":true},{"internalType":"address","name":"vault","type":"address","indexed":false},{"internalType":"address","name":"asset","type":"address","indexed":true},{"internalType":"bool","name":"isNative","type":"bool","indexed":false},{"internalType":"uint256","name":"goal","type":"uint256","indexed":false},{"internalType":"string","name":"name","type":"string","indexed":false}],"type":"event","name":"VaultCreated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"i","type":"uint256"}],"stateMutability":"view","type":"function","name":"allVaults","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"allVaultsLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC20","name":"asset","type":"address"},{"internalType":"uint256","name":"goal","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"createVaultERC20","outputs":[{"internalType":"address","name":"vault","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"goal","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"createVaultNative","outputs":[{"internalType":"address","name":"vault","type":"address"}]},{"inputs":[{"internalType":"address","name":"creator","type":"address"}],"stateMutability":"view","type":"function","name":"getCreatorVaults","outputs":[{"internalType":"address[]","name":"","type":"address[]"}]}],"devdoc":{"kind":"dev","methods":{"createVaultNative(uint256,string)":{"details":"`goal` is in wei."}},"version":1},"userdoc":{"kind":"user","methods":{"createVaultERC20(address,uint256,string)":{"notice":"Create an ERC20-denominated vault."},"createVaultNative(uint256,string)":{"notice":"Create a native MON vault."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","forge-std/=node_modules/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/VaultFactory.sol":"VaultFactory"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/Vault.sol":{"keccak256":"0x9eed3705eacf041870f33ce83a228cc98ea8d25f290b0cfbdf10480d227aa735","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title Vault\n * @notice Vault holds either ONE ERC20 or native MON, chosen at deploy.\n *         Anyone can contribute the chosen asset. Only creator can withdraw,\n *         and only after balance >= goal. One-shot withdraw closes the vault.\n */\ncontract Vault is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Immutable config\n    address public immutable creator;\n    IERC20  public immutable asset;      // zero when isNative == true\n    bool    public immutable isNative;   // true => native MON vault\n    uint256 public immutable goal;       // token units or wei (if native)\n    string  public name;\n\n    // State\n    bool public isWithdrawn;\n\n    // Events\n    event Deposited(address indexed from, uint256 amount, uint256 newBalance, bool isNative);\n    event GoalReached(uint256 timestamp, uint256 balance);\n    event Withdrawn(address indexed to, uint256 amount, bool isNative);\n\n    // Errors\n    error NotCreator();\n    error GoalNotReached();\n    error AlreadyWithdrawn();\n    error InvalidParam();\n    error ZeroAmount();\n    error WrongAsset(); // sending wrong asset type\n\n    constructor(\n        address _creator,\n        IERC20 _asset,           // set to IERC20(address(0)) if native\n        bool _isNative,\n        uint256 _goal,\n        string memory _name\n    ) payable {\n        // Invariants:\n        // - if native: asset must be zero\n        // - if ERC20 : asset must be non-zero\n        if (_creator == address(0) || _goal == 0) revert InvalidParam();\n        if (_isNative) {\n            if (address(_asset) != address(0)) revert InvalidParam();\n        } else {\n            if (address(_asset) == address(0)) revert InvalidParam();\n        }\n        creator = _creator;\n        asset = _asset;\n        isNative = _isNative;\n        goal = _goal;\n        name = _name;\n    }\n\n    // Views\n    function assetBalance() public view returns (uint256) {\n        return isNative ? address(this).balance : asset.balanceOf(address(this));\n    }\n\n    function canWithdraw() public view returns (bool) {\n        return !isWithdrawn && assetBalance() >= goal;\n    }\n\n    // ---- Contributions ----\n\n    /// @notice Contribute ERC20 (only for ERC20 vaults). Caller must have approved this contract.\n    function contribute(uint256 amount) external nonReentrant {\n        if (isNative) revert WrongAsset();\n        if (amount == 0) revert ZeroAmount();\n        asset.safeTransferFrom(msg.sender, address(this), amount);\n        uint256 bal = asset.balanceOf(address(this));\n        emit Deposited(msg.sender, amount, bal, false);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    /// @notice Contribute native MON (only for native vaults).\n    receive() external payable {\n        if (!isNative) revert WrongAsset();\n        if (msg.value == 0) revert ZeroAmount();\n        uint256 bal = address(this).balance;\n        emit Deposited(msg.sender, msg.value, bal, true);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    /// @notice Explicit payable function (same as receive) for UIs.\n    function contributeNative() external payable nonReentrant {\n        if (!isNative) revert WrongAsset();\n        if (msg.value == 0) revert ZeroAmount();\n        uint256 bal = address(this).balance;\n        emit Deposited(msg.sender, msg.value, bal, true);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    // ---- Withdraw ----\n\n    function withdraw() external nonReentrant {\n        if (msg.sender != creator) revert NotCreator();\n        if (isWithdrawn) revert AlreadyWithdrawn();\n\n        uint256 bal = assetBalance();\n        if (bal < goal) revert GoalNotReached();\n\n        isWithdrawn = true;\n\n        if (isNative) {\n            (bool ok, ) = payable(creator).call{value: bal}(\"\");\n            require(ok, \"native transfer failed\");\n            emit Withdrawn(creator, bal, true);\n        } else {\n            asset.safeTransfer(creator, bal);\n            emit Withdrawn(creator, bal, false);\n        }\n    }\n}\n","license":"MIT"},"contracts/VaultFactory.sol":{"keccak256":"0x0a234aabef844345898e67ea86374ae7ed6cf581213e882f10abc405f3d32ce5","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Vault} from \"./Vault.sol\";\n\n/**\n * @notice Deploys vaults that hold either ERC20 OR native MON (chosen at creation).\n */\ncontract VaultFactory {\n    event VaultCreated(\n        address indexed creator,\n        address vault,\n        address indexed asset, // zero address when native\n        bool isNative,\n        uint256 goal,\n        string name\n    );\n\n    mapping(address => address[]) private _creatorVaults;\n    address[] private _allVaults;\n\n    /// @notice Create an ERC20-denominated vault.\n    function createVaultERC20(IERC20 asset, uint256 goal, string calldata name)\n        external\n        returns (address vault)\n    {\n        vault = address(new Vault(msg.sender, asset, false, goal, name));\n        _creatorVaults[msg.sender].push(vault);\n        _allVaults.push(vault);\n        emit VaultCreated(msg.sender, vault, address(asset), false, goal, name);\n    }\n\n    /// @notice Create a native MON vault.\n    /// @dev `goal` is in wei.\n    function createVaultNative(uint256 goal, string calldata name)\n        external\n        returns (address vault)\n    {\n        vault = address(new Vault(msg.sender, IERC20(address(0)), true, goal, name));\n        _creatorVaults[msg.sender].push(vault);\n        _allVaults.push(vault);\n        emit VaultCreated(msg.sender, vault, address(0), true, goal, name);\n    }\n\n    function getCreatorVaults(address creator) external view returns (address[] memory) {\n        return _creatorVaults[creator];\n    }\n\n    function allVaultsLength() external view returns (uint256) {\n        return _allVaults.length;\n    }\n\n    function allVaults(uint256 i) external view returns (address) {\n        return _allVaults[i];\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol":{"keccak256":"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC165.sol":{"keccak256":"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol":{"keccak256":"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n","license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n","license":"MIT"}},"version":1},"id":1}