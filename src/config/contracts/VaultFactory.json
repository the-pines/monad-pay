{"abi":[{"type":"function","name":"allVaults","inputs":[{"name":"i","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"allVaultsLength","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"createVaultERC20","inputs":[{"name":"asset","type":"address","internalType":"contract IERC20"},{"name":"goal","type":"uint256","internalType":"uint256"},{"name":"name","type":"string","internalType":"string"}],"outputs":[{"name":"vault","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"createVaultERC20For","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"asset","type":"address","internalType":"contract IERC20"},{"name":"goal","type":"uint256","internalType":"uint256"},{"name":"name","type":"string","internalType":"string"}],"outputs":[{"name":"vault","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"createVaultNative","inputs":[{"name":"goal","type":"uint256","internalType":"uint256"},{"name":"name","type":"string","internalType":"string"}],"outputs":[{"name":"vault","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"createVaultNativeFor","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"goal","type":"uint256","internalType":"uint256"},{"name":"name","type":"string","internalType":"string"}],"outputs":[{"name":"vault","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"getCreatorVaults","inputs":[{"name":"creator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"getDeployerVaults","inputs":[{"name":"deployer","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"getOwnerVaults","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"VaultCreated","inputs":[{"name":"deployer","type":"address","indexed":true,"internalType":"address"},{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"vault","type":"address","indexed":false,"internalType":"address"},{"name":"asset","type":"address","indexed":true,"internalType":"address"},{"name":"isNative","type":"bool","indexed":false,"internalType":"bool"},{"name":"goal","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"name","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"error","name":"InvalidOwner","inputs":[]}],"bytecode":{"object":"0x6080604052348015600f57600080fd5b506119998061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063674e9ca211610066578063674e9ca2146100c15780639094a91e146101105780639a543d8214610123578063c090f80d14610136578063c0ffcf8d1461014957600080fd5b806339952ba5146100985780633a0f555d146100c15780633c3b2981146100d45780634cd18577146100ff575b600080fd5b6100ab6100a6366004610568565b61015c565b6040516100b8919061058c565b60405180910390f35b6100ab6100cf366004610568565b6101d2565b6100e76100e2366004610621565b610244565b6040516001600160a01b0390911681526020016100b8565b6002546040519081526020016100b8565b6100e761011e366004610694565b610395565b6100e76101313660046106ad565b6103c5565b6100e76101443660046106ad565b6103dd565b6100e7610157366004610709565b61052d565b6001600160a01b0381166000908152600160209081526040918290208054835181840281018401909452808452606093928301828280156101c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101a8575b50505050509050919050565b6001600160a01b038116600090815260208181526040918290208054835181840281018401909452808452606093928301828280156101c6576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a85750505050509050919050565b60006001600160a01b03861661026d576040516349e27cff60e01b815260040160405180910390fd5b8585600086868660405161028090610543565b61028f9695949392919061077e565b604051809103906000f0801580156102ab573d6000803e3d6000fd5b506001600160a01b038088166000818152602081815260408083208054600181810183559185528385200180548789166001600160a01b031991821681179092553380875283865284872080548086018255908852958720909501805482168317905560028054938401815586527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909201805490921617905551949550928916939192917fdb0f9cb6a4fe4421b235900b2f72d2b668a772ebde2c3e3829a83ba87a348f0491610384918791908b908b908b906107c6565b60405180910390a495945050505050565b6000600282815481106103aa576103aa610801565b6000918252602090912001546001600160a01b031692915050565b60006103d43386868686610244565b95945050505050565b60006001600160a01b038516610406576040516349e27cff60e01b815260040160405180910390fd5b846000600186868660405161041a90610543565b6104299695949392919061077e565b604051809103906000f080158015610445573d6000803e3d6000fd5b506001600160a01b038087166000818152602081815260408083208054600181810183559185528385200180549688166001600160a01b03199788168117909155338086528285528386208054808501825590875294862090940180548816821790556002805480840182559086527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805490971617909555519495509093919290917fdb0f9cb6a4fe4421b235900b2f72d2b668a772ebde2c3e3829a83ba87a348f049161051d918791908b908b908b906107c6565b60405180910390a4949350505050565b600061053b338585856103dd565b949350505050565b61114c8061081883390190565b6001600160a01b038116811461056557600080fd5b50565b60006020828403121561057a57600080fd5b813561058581610550565b9392505050565b602080825282518282018190526000918401906040840190835b818110156105cd5783516001600160a01b03168352602093840193909201916001016105a6565b509095945050505050565b60008083601f8401126105ea57600080fd5b50813567ffffffffffffffff81111561060257600080fd5b60208301915083602082850101111561061a57600080fd5b9250929050565b60008060008060006080868803121561063957600080fd5b853561064481610550565b9450602086013561065481610550565b935060408601359250606086013567ffffffffffffffff81111561067757600080fd5b610683888289016105d8565b969995985093965092949392505050565b6000602082840312156106a657600080fd5b5035919050565b600080600080606085870312156106c357600080fd5b84356106ce81610550565b935060208501359250604085013567ffffffffffffffff8111156106f157600080fd5b6106fd878288016105d8565b95989497509550505050565b60008060006040848603121561071e57600080fd5b83359250602084013567ffffffffffffffff81111561073c57600080fd5b610748868287016105d8565b9497909650939450505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0387811682528616602082015284151560408201526060810184905260a0608082018190526000906107ba9083018486610755565b98975050505050505050565b60018060a01b038616815284151560208201528360408201526080606082015260006107f6608083018486610755565b979650505050505050565b634e487b7160e01b600052603260045260246000fdfe61010060405260405161114c38038061114c83398101604081905261002391610117565b60016000556001600160a01b038516158061003c575081155b1561005a57604051633494a40d60e21b815260040160405180910390fd5b821561008d576001600160a01b0384161561008857604051633494a40d60e21b815260040160405180910390fd5b6100b4565b6001600160a01b0384166100b457604051633494a40d60e21b815260040160405180910390fd5b6001600160a01b03808616608052841660a05282151560c05260e082905260016100de82826102b6565b505050505050610374565b6001600160a01b03811681146100fe57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a0868803121561012f57600080fd5b855161013a816100e9565b602087015190955061014b816100e9565b6040870151909450801515811461016157600080fd5b6060870151608088015191945092506001600160401b0381111561018457600080fd5b8601601f8101881361019557600080fd5b80516001600160401b038111156101ae576101ae610101565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101dc576101dc610101565b6040528181528282016020018a10156101f457600080fd5b60005b82811015610213576020818501810151838301820152016101f7565b506000602083830101528093505050509295509295909350565b600181811c9082168061024157607f821691505b60208210810361026157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102b157806000526020600020601f840160051c8101602085101561028e5750805b601f840160051c820191505b818110156102ae576000815560010161029a565b50505b505050565b81516001600160401b038111156102cf576102cf610101565b6102e3816102dd845461022d565b84610267565b6020601f82116001811461031757600083156102ff5750848201515b600019600385901b1c1916600184901b1784556102ae565b600084815260208120601f198516915b828110156103475787850151825560209485019460019092019101610327565b50848210156103655786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60805160a05160c05160e051610d1b6104316000396000818161015801528181610297015281816104b8015281816105aa0152818161081d01526109c901526000818160a70152818161030301528181610407015281816105f8015281816108560152610a3d01526000818161024e01528181610754015281816108c1015281816109010152610a750152600081816101d30152818161053a01528181610620015281816106f50152818161077601526107b30152610d1b6000f3fe6080604052600436106100a05760003560e01c80634019388311610064578063401938831461028557806344aa5700146102c757806373cfc6b2146102f1578063b51459fe14610325578063c1cbbca71461033a578063c66f24551461035a57600080fd5b806302d05d3f146101c157806306fdde03146102125780631f6899351461023457806338d52e0f1461023c5780633ccfd60b1461027057600080fd5b366101bc577f00000000000000000000000000000000000000000000000000000000000000006100e35760405163f170c67f60e01b815260040160405180910390fd5b3460000361010457604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40919081900360600190a260025460ff1615801561017b57507f00000000000000000000000000000000000000000000000000000000000000008110155b156101ba5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b005b600080fd5b3480156101cd57600080fd5b506101f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021e57600080fd5b5061022761036f565b6040516102099190610c2b565b6101ba6103fd565b34801561024857600080fd5b506101f57f000000000000000000000000000000000000000000000000000000000000000081565b34801561027c57600080fd5b506101ba610527565b34801561029157600080fd5b506102b97f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610209565b3480156102d357600080fd5b506002546102e19060ff1681565b6040519015158152602001610209565b3480156102fd57600080fd5b506102e17f000000000000000000000000000000000000000000000000000000000000000081565b34801561033157600080fd5b506102e161080a565b34801561034657600080fd5b506101ba610355366004610c79565b61084c565b34801561036657600080fd5b506102b9610a39565b6001805461037c90610c92565b80601f01602080910402602001604051908101604052809291908181526020018280546103a890610c92565b80156103f55780601f106103ca576101008083540402835291602001916103f5565b820191906000526020600020905b8154815290600101906020018083116103d857829003601f168201915b505050505081565b610405610aed565b7f00000000000000000000000000000000000000000000000000000000000000006104435760405163f170c67f60e01b815260040160405180910390fd5b3460000361046457604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40919081900360600190a260025460ff161580156104db57507f00000000000000000000000000000000000000000000000000000000000000008110155b1561051a5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b506105256001600055565b565b61052f610aed565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610578576040516393687c0b60e01b815260040160405180910390fd5b60025460ff161561059c57604051636507689f60e01b815260040160405180910390fd5b60006105a6610a39565b90507f00000000000000000000000000000000000000000000000000000000000000008110156105e9576040516378c754c960e01b815260040160405180910390fd5b6002805460ff191660011790557f0000000000000000000000000000000000000000000000000000000000000000156107475760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610689576040519150601f19603f3d011682016040523d82523d6000602084013e61068e565b606091505b50509050806106dd5760405162461bcd60e51b81526020600482015260166024820152751b985d1a5d99481d1c985b9cd9995c8819985a5b195960521b60448201526064015b60405180910390fd5b60408051838152600160208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a25061051a565b61079b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610b17565b60408051828152600060208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a2506105256001600055565b60025460009060ff1615801561084757507f0000000000000000000000000000000000000000000000000000000000000000610844610a39565b10155b905090565b610854610aed565b7f0000000000000000000000000000000000000000000000000000000000000000156108935760405163f170c67f60e01b815260040160405180910390fd5b806000036108b457604051631f2a200560e01b815260040160405180910390fd5b6108e96001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610b7b565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190610ccc565b6040805184815260208101839052600081830152905191925033917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c409181900360600190a260025460ff161580156109ec57507f00000000000000000000000000000000000000000000000000000000000000008110155b15610a2b5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b50610a366001600055565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000610ae8576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108479190610ccc565b504790565b600260005403610b1057604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b03838116602483015260448201839052610b7691859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610bba565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610bb49186918216906323b872dd90608401610b44565b50505050565b600080602060008451602086016000885af180610bdd576040513d6000823e3d81fd5b50506000513d91508115610bf5578060011415610c02565b6001600160a01b0384163b155b15610bb457604051635274afe760e01b81526001600160a01b03851660048201526024016106d4565b602081526000825180602084015260005b81811015610c595760208186018101516040868401015201610c3c565b506000604082850101526040601f19601f83011684010191505092915050565b600060208284031215610c8b57600080fd5b5035919050565b600181811c90821680610ca657607f821691505b602082108103610cc657634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610cde57600080fd5b505191905056fea2646970667358221220f02d1bfa89d8c5271b7cbf800f845dcda7e476de177868c2b0747d15f156c58164736f6c634300081c0033a26469706673582212207578848efc5a3defcbdb2a7df51344d97f33dbd00fc3d84712a1f92b363c976764736f6c634300081c0033","sourceMap":"318:3469:1:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063674e9ca211610066578063674e9ca2146100c15780639094a91e146101105780639a543d8214610123578063c090f80d14610136578063c0ffcf8d1461014957600080fd5b806339952ba5146100985780633a0f555d146100c15780633c3b2981146100d45780634cd18577146100ff575b600080fd5b6100ab6100a6366004610568565b61015c565b6040516100b8919061058c565b60405180910390f35b6100ab6100cf366004610568565b6101d2565b6100e76100e2366004610621565b610244565b6040516001600160a01b0390911681526020016100b8565b6002546040519081526020016100b8565b6100e761011e366004610694565b610395565b6100e76101313660046106ad565b6103c5565b6100e76101443660046106ad565b6103dd565b6100e7610157366004610709565b61052d565b6001600160a01b0381166000908152600160209081526040918290208054835181840281018401909452808452606093928301828280156101c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101a8575b50505050509050919050565b6001600160a01b038116600090815260208181526040918290208054835181840281018401909452808452606093928301828280156101c6576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101a85750505050509050919050565b60006001600160a01b03861661026d576040516349e27cff60e01b815260040160405180910390fd5b8585600086868660405161028090610543565b61028f9695949392919061077e565b604051809103906000f0801580156102ab573d6000803e3d6000fd5b506001600160a01b038088166000818152602081815260408083208054600181810183559185528385200180548789166001600160a01b031991821681179092553380875283865284872080548086018255908852958720909501805482168317905560028054938401815586527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909201805490921617905551949550928916939192917fdb0f9cb6a4fe4421b235900b2f72d2b668a772ebde2c3e3829a83ba87a348f0491610384918791908b908b908b906107c6565b60405180910390a495945050505050565b6000600282815481106103aa576103aa610801565b6000918252602090912001546001600160a01b031692915050565b60006103d43386868686610244565b95945050505050565b60006001600160a01b038516610406576040516349e27cff60e01b815260040160405180910390fd5b846000600186868660405161041a90610543565b6104299695949392919061077e565b604051809103906000f080158015610445573d6000803e3d6000fd5b506001600160a01b038087166000818152602081815260408083208054600181810183559185528385200180549688166001600160a01b03199788168117909155338086528285528386208054808501825590875294862090940180548816821790556002805480840182559086527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805490971617909555519495509093919290917fdb0f9cb6a4fe4421b235900b2f72d2b668a772ebde2c3e3829a83ba87a348f049161051d918791908b908b908b906107c6565b60405180910390a4949350505050565b600061053b338585856103dd565b949350505050565b61114c8061081883390190565b6001600160a01b038116811461056557600080fd5b50565b60006020828403121561057a57600080fd5b813561058581610550565b9392505050565b602080825282518282018190526000918401906040840190835b818110156105cd5783516001600160a01b03168352602093840193909201916001016105a6565b509095945050505050565b60008083601f8401126105ea57600080fd5b50813567ffffffffffffffff81111561060257600080fd5b60208301915083602082850101111561061a57600080fd5b9250929050565b60008060008060006080868803121561063957600080fd5b853561064481610550565b9450602086013561065481610550565b935060408601359250606086013567ffffffffffffffff81111561067757600080fd5b610683888289016105d8565b969995985093965092949392505050565b6000602082840312156106a657600080fd5b5035919050565b600080600080606085870312156106c357600080fd5b84356106ce81610550565b935060208501359250604085013567ffffffffffffffff8111156106f157600080fd5b6106fd878288016105d8565b95989497509550505050565b60008060006040848603121561071e57600080fd5b83359250602084013567ffffffffffffffff81111561073c57600080fd5b610748868287016105d8565b9497909650939450505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0387811682528616602082015284151560408201526060810184905260a0608082018190526000906107ba9083018486610755565b98975050505050505050565b60018060a01b038616815284151560208201528360408201526080606082015260006107f6608083018486610755565b979650505050505050565b634e487b7160e01b600052603260045260246000fdfe61010060405260405161114c38038061114c83398101604081905261002391610117565b60016000556001600160a01b038516158061003c575081155b1561005a57604051633494a40d60e21b815260040160405180910390fd5b821561008d576001600160a01b0384161561008857604051633494a40d60e21b815260040160405180910390fd5b6100b4565b6001600160a01b0384166100b457604051633494a40d60e21b815260040160405180910390fd5b6001600160a01b03808616608052841660a05282151560c05260e082905260016100de82826102b6565b505050505050610374565b6001600160a01b03811681146100fe57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a0868803121561012f57600080fd5b855161013a816100e9565b602087015190955061014b816100e9565b6040870151909450801515811461016157600080fd5b6060870151608088015191945092506001600160401b0381111561018457600080fd5b8601601f8101881361019557600080fd5b80516001600160401b038111156101ae576101ae610101565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101dc576101dc610101565b6040528181528282016020018a10156101f457600080fd5b60005b82811015610213576020818501810151838301820152016101f7565b506000602083830101528093505050509295509295909350565b600181811c9082168061024157607f821691505b60208210810361026157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102b157806000526020600020601f840160051c8101602085101561028e5750805b601f840160051c820191505b818110156102ae576000815560010161029a565b50505b505050565b81516001600160401b038111156102cf576102cf610101565b6102e3816102dd845461022d565b84610267565b6020601f82116001811461031757600083156102ff5750848201515b600019600385901b1c1916600184901b1784556102ae565b600084815260208120601f198516915b828110156103475787850151825560209485019460019092019101610327565b50848210156103655786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60805160a05160c05160e051610d1b6104316000396000818161015801528181610297015281816104b8015281816105aa0152818161081d01526109c901526000818160a70152818161030301528181610407015281816105f8015281816108560152610a3d01526000818161024e01528181610754015281816108c1015281816109010152610a750152600081816101d30152818161053a01528181610620015281816106f50152818161077601526107b30152610d1b6000f3fe6080604052600436106100a05760003560e01c80634019388311610064578063401938831461028557806344aa5700146102c757806373cfc6b2146102f1578063b51459fe14610325578063c1cbbca71461033a578063c66f24551461035a57600080fd5b806302d05d3f146101c157806306fdde03146102125780631f6899351461023457806338d52e0f1461023c5780633ccfd60b1461027057600080fd5b366101bc577f00000000000000000000000000000000000000000000000000000000000000006100e35760405163f170c67f60e01b815260040160405180910390fd5b3460000361010457604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40919081900360600190a260025460ff1615801561017b57507f00000000000000000000000000000000000000000000000000000000000000008110155b156101ba5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b005b600080fd5b3480156101cd57600080fd5b506101f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021e57600080fd5b5061022761036f565b6040516102099190610c2b565b6101ba6103fd565b34801561024857600080fd5b506101f57f000000000000000000000000000000000000000000000000000000000000000081565b34801561027c57600080fd5b506101ba610527565b34801561029157600080fd5b506102b97f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610209565b3480156102d357600080fd5b506002546102e19060ff1681565b6040519015158152602001610209565b3480156102fd57600080fd5b506102e17f000000000000000000000000000000000000000000000000000000000000000081565b34801561033157600080fd5b506102e161080a565b34801561034657600080fd5b506101ba610355366004610c79565b61084c565b34801561036657600080fd5b506102b9610a39565b6001805461037c90610c92565b80601f01602080910402602001604051908101604052809291908181526020018280546103a890610c92565b80156103f55780601f106103ca576101008083540402835291602001916103f5565b820191906000526020600020905b8154815290600101906020018083116103d857829003601f168201915b505050505081565b610405610aed565b7f00000000000000000000000000000000000000000000000000000000000000006104435760405163f170c67f60e01b815260040160405180910390fd5b3460000361046457604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40919081900360600190a260025460ff161580156104db57507f00000000000000000000000000000000000000000000000000000000000000008110155b1561051a5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b506105256001600055565b565b61052f610aed565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610578576040516393687c0b60e01b815260040160405180910390fd5b60025460ff161561059c57604051636507689f60e01b815260040160405180910390fd5b60006105a6610a39565b90507f00000000000000000000000000000000000000000000000000000000000000008110156105e9576040516378c754c960e01b815260040160405180910390fd5b6002805460ff191660011790557f0000000000000000000000000000000000000000000000000000000000000000156107475760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610689576040519150601f19603f3d011682016040523d82523d6000602084013e61068e565b606091505b50509050806106dd5760405162461bcd60e51b81526020600482015260166024820152751b985d1a5d99481d1c985b9cd9995c8819985a5b195960521b60448201526064015b60405180910390fd5b60408051838152600160208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a25061051a565b61079b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610b17565b60408051828152600060208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a2506105256001600055565b60025460009060ff1615801561084757507f0000000000000000000000000000000000000000000000000000000000000000610844610a39565b10155b905090565b610854610aed565b7f0000000000000000000000000000000000000000000000000000000000000000156108935760405163f170c67f60e01b815260040160405180910390fd5b806000036108b457604051631f2a200560e01b815260040160405180910390fd5b6108e96001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610b7b565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190610ccc565b6040805184815260208101839052600081830152905191925033917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c409181900360600190a260025460ff161580156109ec57507f00000000000000000000000000000000000000000000000000000000000000008110155b15610a2b5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b50610a366001600055565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000610ae8576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108479190610ccc565b504790565b600260005403610b1057604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b03838116602483015260448201839052610b7691859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610bba565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610bb49186918216906323b872dd90608401610b44565b50505050565b600080602060008451602086016000885af180610bdd576040513d6000823e3d81fd5b50506000513d91508115610bf5578060011415610c02565b6001600160a01b0384163b155b15610bb457604051635274afe760e01b81526001600160a01b03851660048201526024016106d4565b602081526000825180602084015260005b81811015610c595760208186018101516040868401015201610c3c565b506000604082850101526040601f19601f83011684010191505092915050565b600060208284031215610c8b57600080fd5b5035919050565b600181811c90821680610ca657607f821691505b602082108103610cc657634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610cde57600080fd5b505191905056fea2646970667358221220f02d1bfa89d8c5271b7cbf800f845dcda7e476de177868c2b0747d15f156c58164736f6c634300081c0033a26469706673582212207578848efc5a3defcbdb2a7df51344d97f33dbd00fc3d84712a1f92b363c976764736f6c634300081c0033","sourceMap":"318:3469:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3233:135;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3045:123;;;;;;:::i;:::-;;:::i;1443:505::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2388:32:29;;;2370:51;;2358:2;2343:18;1443:505:1;2224:203:29;3580:100:1;3656:10;:17;3580:100;;2578:25:29;;;2566:2;2551:18;3580:100:1;2432:177:29;3686:99:1;;;;;;:::i;:::-;;:::i;2602:213::-;;;;;;:::i;:::-;;:::i;2027:491::-;;;;;;:::i;:::-;;:::i;2821:186::-;;;;;;:::i;:::-;;:::i;3233:135::-;-1:-1:-1;;;;;3336:25:1;;;;;;:15;:25;;;;;;;;;3329:32;;;;;;;;;;;;;;;;;3301:16;;3329:32;;;3336:25;3329:32;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3329:32:1;;;;;;;;;;;;;;;;;;;;;;;3233:135;;;:::o;3045:123::-;-1:-1:-1;;;;;3142:19:1;;:12;:19;;;;;;;;;;;;3135:26;;;;;;;;;;;;;;;;;3107:16;;3135:26;;;3142:19;3135:26;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3135:26:1;;;;;;;;;;;;;;;;;;;;;;3045:123;;;:::o;1443:505::-;1591:13;-1:-1:-1;;;;;1620:19:1;;1616:46;;1648:14;;-1:-1:-1;;;1648:14:1;;;;;;;;;;;1616:46;1698:5;1705;1712;1719:4;1725;;1688:42;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1741:19:1;;;:12;:19;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1741:31:1;;;;;;;;1798:10;1782:27;;;;;;;;;:39;;;;;;;;;;;;;;;;;;;;;;;;1831:10;:22;;;;;;;;;;;;;;;;;;;;;1868:73;1672:59;;-1:-1:-1;1868:73:1;;;;1741:19;;1798:10;1868:73;;;;1672:59;;1741:12;1930:4;;1936;;;;1868:73;:::i;:::-;;;;;;;;1443:505;;;;;;;:::o;3686:99::-;3739:7;3765:10;3776:1;3765:13;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;3765:13:1;;3686:99;-1:-1:-1;;3686:99:1:o;2602:213::-;2726:13;2758:50;2778:10;2790:5;2797:4;2803;;2758:19;:50::i;:::-;2751:57;2602:213;-1:-1:-1;;;;;2602:213:1:o;2027:491::-;2154:13;-1:-1:-1;;;;;2183:19:1;;2179:46;;2211:14;;-1:-1:-1;;;2211:14:1;;;;;;;;;;;2179:46;2261:5;2283:1;2288:4;2294;2300;;2251:54;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2316:19:1;;;:12;:19;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2316:31:1;;;;;;;;2373:10;2357:27;;;;;;;;;:39;;;;;;;;;;;;;;;;;;;;;;;;2406:10;:22;;;;;;;;;;;;;;;;;;;;;2443:68;2235:71;;-1:-1:-1;2316:12:1;;:19;;2373:10;;2443:68;;;;2235:71;;2316:31;2500:4;;2506;;;;2443:68;:::i;:::-;;;;;;;;2027:491;;;;;;:::o;2821:186::-;2924:13;2956:44;2977:10;2989:4;2995;;2956:20;:44::i;:::-;2949:51;2821:186;-1:-1:-1;;;;2821:186:1:o;-1:-1:-1:-;;;;;;;;:::o;14:131:29:-;-1:-1:-1;;;;;89:31:29;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:247::-;209:6;262:2;250:9;241:7;237:23;233:32;230:52;;;278:1;275;268:12;230:52;317:9;304:23;336:31;361:5;336:31;:::i;:::-;386:5;150:247;-1:-1:-1;;;150:247:29:o;402:637::-;592:2;604:21;;;674:13;;577:18;;;696:22;;;544:4;;775:15;;;749:2;734:18;;;544:4;818:195;832:6;829:1;826:13;818:195;;;897:13;;-1:-1:-1;;;;;893:39:29;881:52;;962:2;988:15;;;;953:12;;;;929:1;847:9;818:195;;;-1:-1:-1;1030:3:29;;402:637;-1:-1:-1;;;;;402:637:29:o;1044:348::-;1096:8;1106:6;1160:3;1153:4;1145:6;1141:17;1137:27;1127:55;;1178:1;1175;1168:12;1127:55;-1:-1:-1;1201:20:29;;1244:18;1233:30;;1230:50;;;1276:1;1273;1266:12;1230:50;1313:4;1305:6;1301:17;1289:29;;1365:3;1358:4;1349:6;1341;1337:19;1333:30;1330:39;1327:59;;;1382:1;1379;1372:12;1327:59;1044:348;;;;;:::o;1397:822::-;1509:6;1517;1525;1533;1541;1594:3;1582:9;1573:7;1569:23;1565:33;1562:53;;;1611:1;1608;1601:12;1562:53;1650:9;1637:23;1669:31;1694:5;1669:31;:::i;:::-;1719:5;-1:-1:-1;1776:2:29;1761:18;;1748:32;1789:33;1748:32;1789:33;:::i;:::-;1841:7;-1:-1:-1;1921:2:29;1906:18;;1893:32;;-1:-1:-1;2002:2:29;1987:18;;1974:32;2029:18;2018:30;;2015:50;;;2061:1;2058;2051:12;2015:50;2100:59;2151:7;2142:6;2131:9;2127:22;2100:59;:::i;:::-;1397:822;;;;-1:-1:-1;1397:822:29;;-1:-1:-1;2178:8:29;;2074:85;1397:822;-1:-1:-1;;;1397:822:29:o;2614:226::-;2673:6;2726:2;2714:9;2705:7;2701:23;2697:32;2694:52;;;2742:1;2739;2732:12;2694:52;-1:-1:-1;2787:23:29;;2614:226;-1:-1:-1;2614:226:29:o;2845:680::-;2948:6;2956;2964;2972;3025:2;3013:9;3004:7;3000:23;2996:32;2993:52;;;3041:1;3038;3031:12;2993:52;3080:9;3067:23;3099:31;3124:5;3099:31;:::i;:::-;3149:5;-1:-1:-1;3227:2:29;3212:18;;3199:32;;-1:-1:-1;3308:2:29;3293:18;;3280:32;3335:18;3324:30;;3321:50;;;3367:1;3364;3357:12;3321:50;3406:59;3457:7;3448:6;3437:9;3433:22;3406:59;:::i;:::-;2845:680;;;;-1:-1:-1;3484:8:29;-1:-1:-1;;;;2845:680:29:o;4201:525::-;4281:6;4289;4297;4350:2;4338:9;4329:7;4325:23;4321:32;4318:52;;;4366:1;4363;4356:12;4318:52;4411:23;;;-1:-1:-1;4509:2:29;4494:18;;4481:32;4536:18;4525:30;;4522:50;;;4568:1;4565;4558:12;4522:50;4607:59;4658:7;4649:6;4638:9;4634:22;4607:59;:::i;:::-;4201:525;;4685:8;;-1:-1:-1;4581:85:29;;-1:-1:-1;;;;4201:525:29:o;4731:267::-;4820:6;4815:3;4808:19;4872:6;4865:5;4858:4;4853:3;4849:14;4836:43;-1:-1:-1;4924:1:29;4899:16;;;4917:4;4895:27;;;4888:38;;;;4980:2;4959:15;;;-1:-1:-1;;4955:29:29;4946:39;;;4942:50;;4731:267::o;5003:610::-;-1:-1:-1;;;;;5282:32:29;;;5264:51;;5351:32;;5346:2;5331:18;;5324:60;5427:14;;5420:22;5415:2;5400:18;;5393:50;5474:2;5459:18;;5452:34;;;5302:3;5517;5502:19;;5495:32;;;-1:-1:-1;;5544:63:29;;5587:19;;5579:6;5571;5544:63;:::i;:::-;5536:71;5003:610;-1:-1:-1;;;;;;;;5003:610:29:o;5618:498::-;5884:1;5880;5875:3;5871:11;5867:19;5859:6;5855:32;5844:9;5837:51;5938:6;5931:14;5924:22;5919:2;5908:9;5904:18;5897:50;5983:6;5978:2;5967:9;5963:18;5956:34;6026:3;6021:2;6010:9;6006:18;5999:31;5818:4;6047:63;6105:3;6094:9;6090:19;6082:6;6074;6047:63;:::i;:::-;6039:71;5618:498;-1:-1:-1;;;;;;;5618:498:29:o;6121:127::-;6182:10;6177:3;6173:20;6170:1;6163:31;6213:4;6210:1;6203:15;6237:4;6234:1;6227:15","linkReferences":{}},"methodIdentifiers":{"allVaults(uint256)":"9094a91e","allVaultsLength()":"4cd18577","createVaultERC20(address,uint256,string)":"9a543d82","createVaultERC20For(address,address,uint256,string)":"3c3b2981","createVaultNative(uint256,string)":"c0ffcf8d","createVaultNativeFor(address,uint256,string)":"c090f80d","getCreatorVaults(address)":"674e9ca2","getDeployerVaults(address)":"39952ba5","getOwnerVaults(address)":"3a0f555d"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"allVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allVaultsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createVaultERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createVaultERC20For\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createVaultNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createVaultNativeFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreatorVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"getDeployerVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"VaultCreated(address,address,address,address,bool,uint256,string)\":{\"details\":\"Emitted on every vault creation.\",\"params\":{\"asset\":\"ERC20 token address; zero when native\",\"deployer\":\"The caller who deployed via the factory (msg.sender)\",\"goal\":\"Target balance in token units or wei (if native)\",\"isNative\":\"True if the vault holds native MON\",\"name\":\"Human-readable label stored in the Vault\",\"owner\":\"The vault's owner (\\\"creator\\\" in Vault), the only withdrawer\",\"vault\":\"The deployed Vault address\"}}},\"kind\":\"dev\",\"methods\":{\"getCreatorVaults(address)\":{\"details\":\"Alias to ease migration if you previously used \\\"creator\\\".\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createVaultERC20For(address,address,uint256,string)\":{\"notice\":\"Create an ERC20-denominated vault for `owner`.\"},\"createVaultNativeFor(address,uint256,string)\":{\"notice\":\"Create a native MON vault for `owner`. `goal` is in wei.\"},\"getDeployerVaults(address)\":{\"notice\":\"Vaults deployed by a given factory caller.\"}},\"notice\":\"Deploys vaults that hold either ERC20 OR native MON (chosen at creation).         Supports creating a vault for a different owner.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultFactory.sol\":\"VaultFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":forge-std/=node_modules/forge-std/src/\"]},\"sources\":{\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Vault\\n * @notice Vault holds either ONE ERC20 or native MON, chosen at deploy.\\n *         Anyone can contribute the chosen asset. Only creator can withdraw,\\n *         and only after balance >= goal. One-shot withdraw closes the vault.\\n */\\ncontract Vault is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Immutable config\\n    address public immutable creator;\\n    IERC20  public immutable asset;      // zero when isNative == true\\n    bool    public immutable isNative;   // true => native MON vault\\n    uint256 public immutable goal;       // token units or wei (if native)\\n    string  public name;\\n\\n    // State\\n    bool public isWithdrawn;\\n\\n    // Events\\n    event Deposited(address indexed from, uint256 amount, uint256 newBalance, bool isNative);\\n    event GoalReached(uint256 timestamp, uint256 balance);\\n    event Withdrawn(address indexed to, uint256 amount, bool isNative);\\n\\n    // Errors\\n    error NotCreator();\\n    error GoalNotReached();\\n    error AlreadyWithdrawn();\\n    error InvalidParam();\\n    error ZeroAmount();\\n    error WrongAsset(); // sending wrong asset type\\n\\n    constructor(\\n        address _creator,\\n        IERC20 _asset,           // set to IERC20(address(0)) if native\\n        bool _isNative,\\n        uint256 _goal,\\n        string memory _name\\n    ) payable {\\n        // Invariants:\\n        // - if native: asset must be zero\\n        // - if ERC20 : asset must be non-zero\\n        if (_creator == address(0) || _goal == 0) revert InvalidParam();\\n        if (_isNative) {\\n            if (address(_asset) != address(0)) revert InvalidParam();\\n        } else {\\n            if (address(_asset) == address(0)) revert InvalidParam();\\n        }\\n        creator = _creator;\\n        asset = _asset;\\n        isNative = _isNative;\\n        goal = _goal;\\n        name = _name;\\n    }\\n\\n    // Views\\n    function assetBalance() public view returns (uint256) {\\n        return isNative ? address(this).balance : asset.balanceOf(address(this));\\n    }\\n\\n    function canWithdraw() public view returns (bool) {\\n        return !isWithdrawn && assetBalance() >= goal;\\n    }\\n\\n    // ---- Contributions ----\\n\\n    /// @notice Contribute ERC20 (only for ERC20 vaults). Caller must have approved this contract.\\n    function contribute(uint256 amount) external nonReentrant {\\n        if (isNative) revert WrongAsset();\\n        if (amount == 0) revert ZeroAmount();\\n        asset.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 bal = asset.balanceOf(address(this));\\n        emit Deposited(msg.sender, amount, bal, false);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    /// @notice Contribute native MON (only for native vaults).\\n    receive() external payable {\\n        if (!isNative) revert WrongAsset();\\n        if (msg.value == 0) revert ZeroAmount();\\n        uint256 bal = address(this).balance;\\n        emit Deposited(msg.sender, msg.value, bal, true);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    /// @notice Explicit payable function (same as receive) for UIs.\\n    function contributeNative() external payable nonReentrant {\\n        if (!isNative) revert WrongAsset();\\n        if (msg.value == 0) revert ZeroAmount();\\n        uint256 bal = address(this).balance;\\n        emit Deposited(msg.sender, msg.value, bal, true);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    // ---- Withdraw ----\\n\\n    function withdraw() external nonReentrant {\\n        if (msg.sender != creator) revert NotCreator();\\n        if (isWithdrawn) revert AlreadyWithdrawn();\\n\\n        uint256 bal = assetBalance();\\n        if (bal < goal) revert GoalNotReached();\\n\\n        isWithdrawn = true;\\n\\n        if (isNative) {\\n            (bool ok, ) = payable(creator).call{value: bal}(\\\"\\\");\\n            require(ok, \\\"native transfer failed\\\");\\n            emit Withdrawn(creator, bal, true);\\n        } else {\\n            asset.safeTransfer(creator, bal);\\n            emit Withdrawn(creator, bal, false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9eed3705eacf041870f33ce83a228cc98ea8d25f290b0cfbdf10480d227aa735\",\"license\":\"MIT\"},\"contracts/VaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\n/**\\n * @notice Deploys vaults that hold either ERC20 OR native MON (chosen at creation).\\n *         Supports creating a vault for a different owner.\\n */\\ncontract VaultFactory {\\n    // Errors\\n    error InvalidOwner();\\n\\n    /**\\n     * @dev Emitted on every vault creation.\\n     * @param deployer The caller who deployed via the factory (msg.sender)\\n     * @param owner    The vault's owner (\\\"creator\\\" in Vault), the only withdrawer\\n     * @param vault    The deployed Vault address\\n     * @param asset    ERC20 token address; zero when native\\n     * @param isNative True if the vault holds native MON\\n     * @param goal     Target balance in token units or wei (if native)\\n     * @param name     Human-readable label stored in the Vault\\n     */\\n    event VaultCreated(\\n        address indexed deployer,\\n        address indexed owner,\\n        address vault,\\n        address indexed asset,\\n        bool isNative,\\n        uint256 goal,\\n        string name\\n    );\\n\\n    // Indexes\\n    mapping(address => address[]) private _ownerVaults;    // owner => vaults\\n    mapping(address => address[]) private _deployerVaults; // deployer => vaults\\n    address[] private _allVaults;\\n\\n    // -------- Create-for-owner --------\\n\\n    /// @notice Create an ERC20-denominated vault for `owner`.\\n    function createVaultERC20For(\\n        address owner,\\n        IERC20 asset,\\n        uint256 goal,\\n        string calldata name\\n    ) public returns (address vault) {\\n        if (owner == address(0)) revert InvalidOwner();\\n        vault = address(new Vault(owner, asset, false, goal, name));\\n        _ownerVaults[owner].push(vault);\\n        _deployerVaults[msg.sender].push(vault);\\n        _allVaults.push(vault);\\n        emit VaultCreated(msg.sender, owner, vault, address(asset), false, goal, name);\\n    }\\n\\n    /// @notice Create a native MON vault for `owner`. `goal` is in wei.\\n    function createVaultNativeFor(\\n        address owner,\\n        uint256 goal,\\n        string calldata name\\n    ) public returns (address vault) {\\n        if (owner == address(0)) revert InvalidOwner();\\n        vault = address(new Vault(owner, IERC20(address(0)), true, goal, name));\\n        _ownerVaults[owner].push(vault);\\n        _deployerVaults[msg.sender].push(vault);\\n        _allVaults.push(vault);\\n        emit VaultCreated(msg.sender, owner, vault, address(0), true, goal, name);\\n    }\\n\\n    // -------- Back-compat wrappers (owner defaults to msg.sender) --------\\n\\n    function createVaultERC20(\\n        IERC20 asset,\\n        uint256 goal,\\n        string calldata name\\n    ) external returns (address vault) {\\n        return createVaultERC20For(msg.sender, asset, goal, name);\\n    }\\n\\n    function createVaultNative(\\n        uint256 goal,\\n        string calldata name\\n    ) external returns (address vault) {\\n        return createVaultNativeFor(msg.sender, goal, name);\\n    }\\n\\n    // -------- Views --------\\n\\n    function getOwnerVaults(address owner) external view returns (address[] memory) {\\n        return _ownerVaults[owner];\\n    }\\n\\n    /// @notice Vaults deployed by a given factory caller.\\n    function getDeployerVaults(address deployer) external view returns (address[] memory) {\\n        return _deployerVaults[deployer];\\n    }\\n\\n    /// @dev Alias to ease migration if you previously used \\\"creator\\\".\\n    function getCreatorVaults(address creator) external view returns (address[] memory) {\\n        return _ownerVaults[creator];\\n    }\\n\\n    function allVaultsLength() external view returns (uint256) {\\n        return _allVaults.length;\\n    }\\n\\n    function allVaults(uint256 i) external view returns (address) {\\n        return _allVaults[i];\\n    }\\n}\\n\",\"keccak256\":\"0x16e6a9f5521b5ec6baec4f574b57493379f26c3ac17eeb95e60d568d308943a0\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"InvalidOwner"},{"inputs":[{"internalType":"address","name":"deployer","type":"address","indexed":true},{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"vault","type":"address","indexed":false},{"internalType":"address","name":"asset","type":"address","indexed":true},{"internalType":"bool","name":"isNative","type":"bool","indexed":false},{"internalType":"uint256","name":"goal","type":"uint256","indexed":false},{"internalType":"string","name":"name","type":"string","indexed":false}],"type":"event","name":"VaultCreated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"i","type":"uint256"}],"stateMutability":"view","type":"function","name":"allVaults","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"allVaultsLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC20","name":"asset","type":"address"},{"internalType":"uint256","name":"goal","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"createVaultERC20","outputs":[{"internalType":"address","name":"vault","type":"address"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"contract IERC20","name":"asset","type":"address"},{"internalType":"uint256","name":"goal","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"createVaultERC20For","outputs":[{"internalType":"address","name":"vault","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"goal","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"createVaultNative","outputs":[{"internalType":"address","name":"vault","type":"address"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"goal","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"createVaultNativeFor","outputs":[{"internalType":"address","name":"vault","type":"address"}]},{"inputs":[{"internalType":"address","name":"creator","type":"address"}],"stateMutability":"view","type":"function","name":"getCreatorVaults","outputs":[{"internalType":"address[]","name":"","type":"address[]"}]},{"inputs":[{"internalType":"address","name":"deployer","type":"address"}],"stateMutability":"view","type":"function","name":"getDeployerVaults","outputs":[{"internalType":"address[]","name":"","type":"address[]"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function","name":"getOwnerVaults","outputs":[{"internalType":"address[]","name":"","type":"address[]"}]}],"devdoc":{"kind":"dev","methods":{"getCreatorVaults(address)":{"details":"Alias to ease migration if you previously used \"creator\"."}},"version":1},"userdoc":{"kind":"user","methods":{"createVaultERC20For(address,address,uint256,string)":{"notice":"Create an ERC20-denominated vault for `owner`."},"createVaultNativeFor(address,uint256,string)":{"notice":"Create a native MON vault for `owner`. `goal` is in wei."},"getDeployerVaults(address)":{"notice":"Vaults deployed by a given factory caller."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","forge-std/=node_modules/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/VaultFactory.sol":"VaultFactory"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/Vault.sol":{"keccak256":"0x9eed3705eacf041870f33ce83a228cc98ea8d25f290b0cfbdf10480d227aa735","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title Vault\n * @notice Vault holds either ONE ERC20 or native MON, chosen at deploy.\n *         Anyone can contribute the chosen asset. Only creator can withdraw,\n *         and only after balance >= goal. One-shot withdraw closes the vault.\n */\ncontract Vault is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Immutable config\n    address public immutable creator;\n    IERC20  public immutable asset;      // zero when isNative == true\n    bool    public immutable isNative;   // true => native MON vault\n    uint256 public immutable goal;       // token units or wei (if native)\n    string  public name;\n\n    // State\n    bool public isWithdrawn;\n\n    // Events\n    event Deposited(address indexed from, uint256 amount, uint256 newBalance, bool isNative);\n    event GoalReached(uint256 timestamp, uint256 balance);\n    event Withdrawn(address indexed to, uint256 amount, bool isNative);\n\n    // Errors\n    error NotCreator();\n    error GoalNotReached();\n    error AlreadyWithdrawn();\n    error InvalidParam();\n    error ZeroAmount();\n    error WrongAsset(); // sending wrong asset type\n\n    constructor(\n        address _creator,\n        IERC20 _asset,           // set to IERC20(address(0)) if native\n        bool _isNative,\n        uint256 _goal,\n        string memory _name\n    ) payable {\n        // Invariants:\n        // - if native: asset must be zero\n        // - if ERC20 : asset must be non-zero\n        if (_creator == address(0) || _goal == 0) revert InvalidParam();\n        if (_isNative) {\n            if (address(_asset) != address(0)) revert InvalidParam();\n        } else {\n            if (address(_asset) == address(0)) revert InvalidParam();\n        }\n        creator = _creator;\n        asset = _asset;\n        isNative = _isNative;\n        goal = _goal;\n        name = _name;\n    }\n\n    // Views\n    function assetBalance() public view returns (uint256) {\n        return isNative ? address(this).balance : asset.balanceOf(address(this));\n    }\n\n    function canWithdraw() public view returns (bool) {\n        return !isWithdrawn && assetBalance() >= goal;\n    }\n\n    // ---- Contributions ----\n\n    /// @notice Contribute ERC20 (only for ERC20 vaults). Caller must have approved this contract.\n    function contribute(uint256 amount) external nonReentrant {\n        if (isNative) revert WrongAsset();\n        if (amount == 0) revert ZeroAmount();\n        asset.safeTransferFrom(msg.sender, address(this), amount);\n        uint256 bal = asset.balanceOf(address(this));\n        emit Deposited(msg.sender, amount, bal, false);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    /// @notice Contribute native MON (only for native vaults).\n    receive() external payable {\n        if (!isNative) revert WrongAsset();\n        if (msg.value == 0) revert ZeroAmount();\n        uint256 bal = address(this).balance;\n        emit Deposited(msg.sender, msg.value, bal, true);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    /// @notice Explicit payable function (same as receive) for UIs.\n    function contributeNative() external payable nonReentrant {\n        if (!isNative) revert WrongAsset();\n        if (msg.value == 0) revert ZeroAmount();\n        uint256 bal = address(this).balance;\n        emit Deposited(msg.sender, msg.value, bal, true);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    // ---- Withdraw ----\n\n    function withdraw() external nonReentrant {\n        if (msg.sender != creator) revert NotCreator();\n        if (isWithdrawn) revert AlreadyWithdrawn();\n\n        uint256 bal = assetBalance();\n        if (bal < goal) revert GoalNotReached();\n\n        isWithdrawn = true;\n\n        if (isNative) {\n            (bool ok, ) = payable(creator).call{value: bal}(\"\");\n            require(ok, \"native transfer failed\");\n            emit Withdrawn(creator, bal, true);\n        } else {\n            asset.safeTransfer(creator, bal);\n            emit Withdrawn(creator, bal, false);\n        }\n    }\n}\n","license":"MIT"},"contracts/VaultFactory.sol":{"keccak256":"0x16e6a9f5521b5ec6baec4f574b57493379f26c3ac17eeb95e60d568d308943a0","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Vault} from \"./Vault.sol\";\n\n/**\n * @notice Deploys vaults that hold either ERC20 OR native MON (chosen at creation).\n *         Supports creating a vault for a different owner.\n */\ncontract VaultFactory {\n    // Errors\n    error InvalidOwner();\n\n    /**\n     * @dev Emitted on every vault creation.\n     * @param deployer The caller who deployed via the factory (msg.sender)\n     * @param owner    The vault's owner (\"creator\" in Vault), the only withdrawer\n     * @param vault    The deployed Vault address\n     * @param asset    ERC20 token address; zero when native\n     * @param isNative True if the vault holds native MON\n     * @param goal     Target balance in token units or wei (if native)\n     * @param name     Human-readable label stored in the Vault\n     */\n    event VaultCreated(\n        address indexed deployer,\n        address indexed owner,\n        address vault,\n        address indexed asset,\n        bool isNative,\n        uint256 goal,\n        string name\n    );\n\n    // Indexes\n    mapping(address => address[]) private _ownerVaults;    // owner => vaults\n    mapping(address => address[]) private _deployerVaults; // deployer => vaults\n    address[] private _allVaults;\n\n    // -------- Create-for-owner --------\n\n    /// @notice Create an ERC20-denominated vault for `owner`.\n    function createVaultERC20For(\n        address owner,\n        IERC20 asset,\n        uint256 goal,\n        string calldata name\n    ) public returns (address vault) {\n        if (owner == address(0)) revert InvalidOwner();\n        vault = address(new Vault(owner, asset, false, goal, name));\n        _ownerVaults[owner].push(vault);\n        _deployerVaults[msg.sender].push(vault);\n        _allVaults.push(vault);\n        emit VaultCreated(msg.sender, owner, vault, address(asset), false, goal, name);\n    }\n\n    /// @notice Create a native MON vault for `owner`. `goal` is in wei.\n    function createVaultNativeFor(\n        address owner,\n        uint256 goal,\n        string calldata name\n    ) public returns (address vault) {\n        if (owner == address(0)) revert InvalidOwner();\n        vault = address(new Vault(owner, IERC20(address(0)), true, goal, name));\n        _ownerVaults[owner].push(vault);\n        _deployerVaults[msg.sender].push(vault);\n        _allVaults.push(vault);\n        emit VaultCreated(msg.sender, owner, vault, address(0), true, goal, name);\n    }\n\n    // -------- Back-compat wrappers (owner defaults to msg.sender) --------\n\n    function createVaultERC20(\n        IERC20 asset,\n        uint256 goal,\n        string calldata name\n    ) external returns (address vault) {\n        return createVaultERC20For(msg.sender, asset, goal, name);\n    }\n\n    function createVaultNative(\n        uint256 goal,\n        string calldata name\n    ) external returns (address vault) {\n        return createVaultNativeFor(msg.sender, goal, name);\n    }\n\n    // -------- Views --------\n\n    function getOwnerVaults(address owner) external view returns (address[] memory) {\n        return _ownerVaults[owner];\n    }\n\n    /// @notice Vaults deployed by a given factory caller.\n    function getDeployerVaults(address deployer) external view returns (address[] memory) {\n        return _deployerVaults[deployer];\n    }\n\n    /// @dev Alias to ease migration if you previously used \"creator\".\n    function getCreatorVaults(address creator) external view returns (address[] memory) {\n        return _ownerVaults[creator];\n    }\n\n    function allVaultsLength() external view returns (uint256) {\n        return _allVaults.length;\n    }\n\n    function allVaults(uint256 i) external view returns (address) {\n        return _allVaults[i];\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol":{"keccak256":"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC165.sol":{"keccak256":"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol":{"keccak256":"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n","license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n","license":"MIT"}},"version":1},"id":1}