{"abi":[{"type":"constructor","inputs":[{"name":"_creator","type":"address","internalType":"address"},{"name":"_asset","type":"address","internalType":"contract IERC20"},{"name":"_isNative","type":"bool","internalType":"bool"},{"name":"_goal","type":"uint256","internalType":"uint256"},{"name":"_name","type":"string","internalType":"string"}],"stateMutability":"payable"},{"type":"receive","stateMutability":"payable"},{"type":"function","name":"asset","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IERC20"}],"stateMutability":"view"},{"type":"function","name":"assetBalance","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"canWithdraw","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"contribute","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"contributeNative","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"creator","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"goal","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"isNative","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isWithdrawn","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"withdraw","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Deposited","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newBalance","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"isNative","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"GoalReached","inputs":[{"name":"timestamp","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"balance","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Withdrawn","inputs":[{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"isNative","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"error","name":"AlreadyWithdrawn","inputs":[]},{"type":"error","name":"GoalNotReached","inputs":[]},{"type":"error","name":"InvalidParam","inputs":[]},{"type":"error","name":"NotCreator","inputs":[]},{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]},{"type":"error","name":"SafeERC20FailedOperation","inputs":[{"name":"token","type":"address","internalType":"address"}]},{"type":"error","name":"WrongAsset","inputs":[]},{"type":"error","name":"ZeroAmount","inputs":[]}],"bytecode":{"object":"0x61010060405260405161114c38038061114c83398101604081905261002391610117565b60016000556001600160a01b038516158061003c575081155b1561005a57604051633494a40d60e21b815260040160405180910390fd5b821561008d576001600160a01b0384161561008857604051633494a40d60e21b815260040160405180910390fd5b6100b4565b6001600160a01b0384166100b457604051633494a40d60e21b815260040160405180910390fd5b6001600160a01b03808616608052841660a05282151560c05260e082905260016100de82826102b6565b505050505050610374565b6001600160a01b03811681146100fe57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a0868803121561012f57600080fd5b855161013a816100e9565b602087015190955061014b816100e9565b6040870151909450801515811461016157600080fd5b6060870151608088015191945092506001600160401b0381111561018457600080fd5b8601601f8101881361019557600080fd5b80516001600160401b038111156101ae576101ae610101565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101dc576101dc610101565b6040528181528282016020018a10156101f457600080fd5b60005b82811015610213576020818501810151838301820152016101f7565b506000602083830101528093505050509295509295909350565b600181811c9082168061024157607f821691505b60208210810361026157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102b157806000526020600020601f840160051c8101602085101561028e5750805b601f840160051c820191505b818110156102ae576000815560010161029a565b50505b505050565b81516001600160401b038111156102cf576102cf610101565b6102e3816102dd845461022d565b84610267565b6020601f82116001811461031757600083156102ff5750848201515b600019600385901b1c1916600184901b1784556102ae565b600084815260208120601f198516915b828110156103475787850151825560209485019460019092019101610327565b50848210156103655786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60805160a05160c05160e051610d1b6104316000396000818161015801528181610297015281816104b8015281816105aa0152818161081d01526109c901526000818160a70152818161030301528181610407015281816105f8015281816108560152610a3d01526000818161024e01528181610754015281816108c1015281816109010152610a750152600081816101d30152818161053a01528181610620015281816106f50152818161077601526107b30152610d1b6000f3fe6080604052600436106100a05760003560e01c80634019388311610064578063401938831461028557806344aa5700146102c757806373cfc6b2146102f1578063b51459fe14610325578063c1cbbca71461033a578063c66f24551461035a57600080fd5b806302d05d3f146101c157806306fdde03146102125780631f6899351461023457806338d52e0f1461023c5780633ccfd60b1461027057600080fd5b366101bc577f00000000000000000000000000000000000000000000000000000000000000006100e35760405163f170c67f60e01b815260040160405180910390fd5b3460000361010457604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40919081900360600190a260025460ff1615801561017b57507f00000000000000000000000000000000000000000000000000000000000000008110155b156101ba5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b005b600080fd5b3480156101cd57600080fd5b506101f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021e57600080fd5b5061022761036f565b6040516102099190610c2b565b6101ba6103fd565b34801561024857600080fd5b506101f57f000000000000000000000000000000000000000000000000000000000000000081565b34801561027c57600080fd5b506101ba610527565b34801561029157600080fd5b506102b97f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610209565b3480156102d357600080fd5b506002546102e19060ff1681565b6040519015158152602001610209565b3480156102fd57600080fd5b506102e17f000000000000000000000000000000000000000000000000000000000000000081565b34801561033157600080fd5b506102e161080a565b34801561034657600080fd5b506101ba610355366004610c79565b61084c565b34801561036657600080fd5b506102b9610a39565b6001805461037c90610c92565b80601f01602080910402602001604051908101604052809291908181526020018280546103a890610c92565b80156103f55780601f106103ca576101008083540402835291602001916103f5565b820191906000526020600020905b8154815290600101906020018083116103d857829003601f168201915b505050505081565b610405610aed565b7f00000000000000000000000000000000000000000000000000000000000000006104435760405163f170c67f60e01b815260040160405180910390fd5b3460000361046457604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40919081900360600190a260025460ff161580156104db57507f00000000000000000000000000000000000000000000000000000000000000008110155b1561051a5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b506105256001600055565b565b61052f610aed565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610578576040516393687c0b60e01b815260040160405180910390fd5b60025460ff161561059c57604051636507689f60e01b815260040160405180910390fd5b60006105a6610a39565b90507f00000000000000000000000000000000000000000000000000000000000000008110156105e9576040516378c754c960e01b815260040160405180910390fd5b6002805460ff191660011790557f0000000000000000000000000000000000000000000000000000000000000000156107475760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610689576040519150601f19603f3d011682016040523d82523d6000602084013e61068e565b606091505b50509050806106dd5760405162461bcd60e51b81526020600482015260166024820152751b985d1a5d99481d1c985b9cd9995c8819985a5b195960521b60448201526064015b60405180910390fd5b60408051838152600160208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a25061051a565b61079b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610b17565b60408051828152600060208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a2506105256001600055565b60025460009060ff1615801561084757507f0000000000000000000000000000000000000000000000000000000000000000610844610a39565b10155b905090565b610854610aed565b7f0000000000000000000000000000000000000000000000000000000000000000156108935760405163f170c67f60e01b815260040160405180910390fd5b806000036108b457604051631f2a200560e01b815260040160405180910390fd5b6108e96001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610b7b565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190610ccc565b6040805184815260208101839052600081830152905191925033917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c409181900360600190a260025460ff161580156109ec57507f00000000000000000000000000000000000000000000000000000000000000008110155b15610a2b5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b50610a366001600055565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000610ae8576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108479190610ccc565b504790565b600260005403610b1057604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b03838116602483015260448201839052610b7691859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610bba565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610bb49186918216906323b872dd90608401610b44565b50505050565b600080602060008451602086016000885af180610bdd576040513d6000823e3d81fd5b50506000513d91508115610bf5578060011415610c02565b6001600160a01b0384163b155b15610bb457604051635274afe760e01b81526001600160a01b03851660048201526024016106d4565b602081526000825180602084015260005b81811015610c595760208186018101516040868401015201610c3c565b506000604082850101526040601f19601f83011684010191505092915050565b600060208284031215610c8b57600080fd5b5035919050565b600181811c90821680610ca657607f821691505b602082108103610cc657634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610cde57600080fd5b505191905056fea2646970667358221220f02d1bfa89d8c5271b7cbf800f845dcda7e476de177868c2b0747d15f156c58164736f6c634300081c0033","sourceMap":"550:3816:0:-:0;;;1408:711;;;;;;;;;;;;;;;;;;:::i;:::-;1857:1:7;2061:7;:21;-1:-1:-1;;;;;1735:22:0;;;;:36;;-1:-1:-1;1761:10:0;;1735:36;1731:63;;;1780:14;;-1:-1:-1;;;1780:14:0;;;;;;;;;;;1731:63;1808:9;1804:183;;;-1:-1:-1;;;;;1837:29:0;;;1833:56;;1875:14;;-1:-1:-1;;;1875:14:0;;;;;;;;;;;1833:56;1804:183;;;-1:-1:-1;;;;;1924:29:0;;1920:56;;1962:14;;-1:-1:-1;;;1962:14:0;;;;;;;;;;;1920:56;-1:-1:-1;;;;;1996:18:0;;;;;2024:14;;;;2048:20;;;;;2078:12;;;;2100:4;:12;2107:5;2100:4;:12;:::i;:::-;;1408:711;;;;;550:3816;;14:131:29;-1:-1:-1;;;;;89:31:29;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:127::-;211:10;206:3;202:20;199:1;192:31;242:4;239:1;232:15;266:4;263:1;256:15;282:1545;409:6;417;425;433;441;494:3;482:9;473:7;469:23;465:33;462:53;;;511:1;508;501:12;462:53;543:9;537:16;562:31;587:5;562:31;:::i;:::-;662:2;647:18;;641:25;612:5;;-1:-1:-1;675:33:29;641:25;675:33;:::i;:::-;779:2;764:18;;758:25;727:7;;-1:-1:-1;821:15:29;;814:23;802:36;;792:64;;852:1;849;842:12;792:64;922:2;907:18;;901:25;970:3;955:19;;949:26;875:7;;-1:-1:-1;901:25:29;-1:-1:-1;;;;;;987:30:29;;984:50;;;1030:1;1027;1020:12;984:50;1053:22;;1106:4;1098:13;;1094:27;-1:-1:-1;1084:55:29;;1135:1;1132;1125:12;1084:55;1162:9;;-1:-1:-1;;;;;1183:30:29;;1180:56;;;1216:18;;:::i;:::-;1265:2;1259:9;1357:2;1319:17;;-1:-1:-1;;1315:31:29;;;1348:2;1311:40;1307:54;1295:67;;-1:-1:-1;;;;;1377:34:29;;1413:22;;;1374:62;1371:88;;;1439:18;;:::i;:::-;1475:2;1468:22;1499;;;1540:15;;;1557:2;1536:24;1533:37;-1:-1:-1;1530:57:29;;;1583:1;1580;1573:12;1530:57;1605:1;1615:133;1629:6;1626:1;1623:13;1615:133;;;1733:2;1721:10;;;1717:19;;1711:26;1690:14;;;1686:23;;1679:59;1644:10;1615:133;;;1619:3;1794:1;1789:2;1780:6;1772;1768:19;1764:28;1757:39;1815:6;1805:16;;;;;282:1545;;;;;;;;:::o;1832:380::-;1911:1;1907:12;;;;1954;;;1975:61;;2029:4;2021:6;2017:17;2007:27;;1975:61;2082:2;2074:6;2071:14;2051:18;2048:38;2045:161;;2128:10;2123:3;2119:20;2116:1;2109:31;2163:4;2160:1;2153:15;2191:4;2188:1;2181:15;2045:161;;1832:380;;;:::o;2343:518::-;2445:2;2440:3;2437:11;2434:421;;;2481:5;2478:1;2471:16;2525:4;2522:1;2512:18;2595:2;2583:10;2579:19;2576:1;2572:27;2566:4;2562:38;2631:4;2619:10;2616:20;2613:47;;;-1:-1:-1;2654:4:29;2613:47;2709:2;2704:3;2700:12;2697:1;2693:20;2687:4;2683:31;2673:41;;2764:81;2782:2;2775:5;2772:13;2764:81;;;2841:1;2827:16;;2808:1;2797:13;2764:81;;;2768:3;;2434:421;2343:518;;;:::o;3037:1299::-;3157:10;;-1:-1:-1;;;;;3179:30:29;;3176:56;;;3212:18;;:::i;:::-;3241:97;3331:6;3291:38;3323:4;3317:11;3291:38;:::i;:::-;3285:4;3241:97;:::i;:::-;3387:4;3418:2;3407:14;;3435:1;3430:649;;;;4123:1;4140:6;4137:89;;;-1:-1:-1;4192:19:29;;;4186:26;4137:89;-1:-1:-1;;2994:1:29;2990:11;;;2986:24;2982:29;2972:40;3018:1;3014:11;;;2969:57;4239:81;;3400:930;;3430:649;2290:1;2283:14;;;2327:4;2314:18;;-1:-1:-1;;3466:20:29;;;3584:222;3598:7;3595:1;3592:14;3584:222;;;3680:19;;;3674:26;3659:42;;3787:4;3772:20;;;;3740:1;3728:14;;;;3614:12;3584:222;;;3588:3;3834:6;3825:7;3822:19;3819:201;;;3895:19;;;3889:26;-1:-1:-1;;3978:1:29;3974:14;;;3990:3;3970:24;3966:37;3962:42;3947:58;3932:74;;3819:201;-1:-1:-1;;;;4066:1:29;4050:14;;;4046:22;4033:36;;-1:-1:-1;3037:1299:29:o;:::-;550:3816:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x6080604052600436106100a05760003560e01c80634019388311610064578063401938831461028557806344aa5700146102c757806373cfc6b2146102f1578063b51459fe14610325578063c1cbbca71461033a578063c66f24551461035a57600080fd5b806302d05d3f146101c157806306fdde03146102125780631f6899351461023457806338d52e0f1461023c5780633ccfd60b1461027057600080fd5b366101bc577f00000000000000000000000000000000000000000000000000000000000000006100e35760405163f170c67f60e01b815260040160405180910390fd5b3460000361010457604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40919081900360600190a260025460ff1615801561017b57507f00000000000000000000000000000000000000000000000000000000000000008110155b156101ba5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b005b600080fd5b3480156101cd57600080fd5b506101f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021e57600080fd5b5061022761036f565b6040516102099190610c2b565b6101ba6103fd565b34801561024857600080fd5b506101f57f000000000000000000000000000000000000000000000000000000000000000081565b34801561027c57600080fd5b506101ba610527565b34801561029157600080fd5b506102b97f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610209565b3480156102d357600080fd5b506002546102e19060ff1681565b6040519015158152602001610209565b3480156102fd57600080fd5b506102e17f000000000000000000000000000000000000000000000000000000000000000081565b34801561033157600080fd5b506102e161080a565b34801561034657600080fd5b506101ba610355366004610c79565b61084c565b34801561036657600080fd5b506102b9610a39565b6001805461037c90610c92565b80601f01602080910402602001604051908101604052809291908181526020018280546103a890610c92565b80156103f55780601f106103ca576101008083540402835291602001916103f5565b820191906000526020600020905b8154815290600101906020018083116103d857829003601f168201915b505050505081565b610405610aed565b7f00000000000000000000000000000000000000000000000000000000000000006104435760405163f170c67f60e01b815260040160405180910390fd5b3460000361046457604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40919081900360600190a260025460ff161580156104db57507f00000000000000000000000000000000000000000000000000000000000000008110155b1561051a5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b506105256001600055565b565b61052f610aed565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610578576040516393687c0b60e01b815260040160405180910390fd5b60025460ff161561059c57604051636507689f60e01b815260040160405180910390fd5b60006105a6610a39565b90507f00000000000000000000000000000000000000000000000000000000000000008110156105e9576040516378c754c960e01b815260040160405180910390fd5b6002805460ff191660011790557f0000000000000000000000000000000000000000000000000000000000000000156107475760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610689576040519150601f19603f3d011682016040523d82523d6000602084013e61068e565b606091505b50509050806106dd5760405162461bcd60e51b81526020600482015260166024820152751b985d1a5d99481d1c985b9cd9995c8819985a5b195960521b60448201526064015b60405180910390fd5b60408051838152600160208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a25061051a565b61079b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610b17565b60408051828152600060208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a2506105256001600055565b60025460009060ff1615801561084757507f0000000000000000000000000000000000000000000000000000000000000000610844610a39565b10155b905090565b610854610aed565b7f0000000000000000000000000000000000000000000000000000000000000000156108935760405163f170c67f60e01b815260040160405180910390fd5b806000036108b457604051631f2a200560e01b815260040160405180910390fd5b6108e96001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610b7b565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190610ccc565b6040805184815260208101839052600081830152905191925033917f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c409181900360600190a260025460ff161580156109ec57507f00000000000000000000000000000000000000000000000000000000000000008110155b15610a2b5760408051428152602081018390527f85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c910160405180910390a15b50610a366001600055565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000610ae8576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108479190610ccc565b504790565b600260005403610b1057604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b03838116602483015260448201839052610b7691859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610bba565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610bb49186918216906323b872dd90608401610b44565b50505050565b600080602060008451602086016000885af180610bdd576040513d6000823e3d81fd5b50506000513d91508115610bf5578060011415610c02565b6001600160a01b0384163b155b15610bb457604051635274afe760e01b81526001600160a01b03851660048201526024016106d4565b602081526000825180602084015260005b81811015610c595760208186018101516040868401015201610c3c565b506000604082850101526040601f19601f83011684010191505092915050565b600060208284031215610c8b57600080fd5b5035919050565b600181811c90821680610ca657607f821691505b602082108103610cc657634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610cde57600080fd5b505191905056fea2646970667358221220f02d1bfa89d8c5271b7cbf800f845dcda7e476de177868c2b0747d15f156c58164736f6c634300081c0033","sourceMap":"550:3816:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3060:8;3055:34;;3077:12;;-1:-1:-1;;;3077:12:0;;;;;;;;;;;3055:34;3103:9;3116:1;3103:14;3099:39;;3126:12;;-1:-1:-1;;;3126:12:0;;;;;;;;;;;3099:39;3198:43;;;3220:9;210:25:29;;3162:21:0;266:2:29;251:18;;244:34;;;3236:4:0;294:18:29;;;287:50;3198:43:0;;3208:10;;3198:43;;;;;;198:2:29;3198:43:0;;;3256:11;;;;3255:12;:27;;;;;3278:4;3271:3;:11;;3255:27;3251:71;;;3289:33;;;3301:15;522:25:29;;578:2;563:18;;556:34;;;3289:33:0;;495:18:29;3289:33:0;;;;;;;3251:71;3045:284;550:3816;;;;647:32;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;765:32:29;;;747:51;;735:2;720:18;647:32:0;;;;;;;;900:19;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3404:342::-;;;:::i;685:30::-;;;;;;;;;;;;;;;3779:585;;;;;;;;;;;;;:::i;825:29::-;;;;;;;;;;;;;;;;;;1709:25:29;;;1697:2;1682:18;825:29:0;1563:177:29;939:23:0;;;;;;;;;;-1:-1:-1;939:23:0;;;;;;;;;;;1910:14:29;;1903:22;1885:41;;1873:2;1858:18;939:23:0;1745:187:29;756:33:0;;;;;;;;;;;;;;;2287:112;;;;;;;;;;;;;:::i;2536:412::-;;;;;;;;;;-1:-1:-1;2536:412:0;;;;;:::i;:::-;;:::i;2138:143::-;;;;;;;;;;;;;:::i;900:19::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3404:342::-;2500:21:7;:19;:21::i;:::-;3477:8:0::1;3472:34;;3494:12;;-1:-1:-1::0;;;3494:12:0::1;;;;;;;;;;;3472:34;3520:9;3533:1;3520:14:::0;3516:39:::1;;3543:12;;-1:-1:-1::0;;;3543:12:0::1;;;;;;;;;;;3516:39;3615:43;::::0;;3637:9:::1;210:25:29::0;;3579:21:0::1;266:2:29::0;251:18;;244:34;;;3653:4:0::1;294:18:29::0;;;287:50;3615:43:0;;3625:10:::1;::::0;3615:43:::1;::::0;;;;;198:2:29;3615:43:0;;::::1;3673:11;::::0;::::1;;3672:12;:27:::0;::::1;;;;3695:4;3688:3;:11;;3672:27;3668:71;;;3706:33;::::0;;3718:15:::1;522:25:29::0;;578:2;563:18;;556:34;;;3706:33:0::1;::::0;495:18:29;3706:33:0::1;;;;;;;3668:71;3462:284;2542:20:7::0;1857:1;3068:7;:21;2888:208;2542:20;3404:342:0:o;3779:585::-;2500:21:7;:19;:21::i;:::-;3835:10:0::1;-1:-1:-1::0;;;;;3849:7:0::1;3835:21;;3831:46;;3865:12;;-1:-1:-1::0;;;3865:12:0::1;;;;;;;;;;;3831:46;3891:11;::::0;::::1;;3887:42;;;3911:18;;-1:-1:-1::0;;;3911:18:0::1;;;;;;;;;;;3887:42;3940:11;3954:14;:12;:14::i;:::-;3940:28;;3988:4;3982:3;:10;3978:39;;;4001:16;;-1:-1:-1::0;;;4001:16:0::1;;;;;;;;;;;3978:39;4028:11;:18:::0;;-1:-1:-1;;4028:18:0::1;4042:4;4028:18;::::0;;4061:8:::1;4057:301;;;4086:7;4107;-1:-1:-1::0;;;;;4099:21:0::1;4128:3;4099:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4085:51;;;4158:2;4150:37;;;::::0;-1:-1:-1;;;4150:37:0;;2919:2:29;4150:37:0::1;::::0;::::1;2901:21:29::0;2958:2;2938:18;;;2931:30;-1:-1:-1;;;2977:18:29;;;2970:52;3039:18;;4150:37:0::1;;;;;;;;;4206:29;::::0;;3236:25:29;;;4230:4:0::1;3292:2:29::0;3277:18;;3270:50;-1:-1:-1;;;;;4216:7:0::1;4206:29;::::0;::::1;::::0;3209:18:29;4206:29:0::1;;;;;;;4071:175;4057:301;;;4266:32;-1:-1:-1::0;;;;;4266:5:0::1;:18;4285:7;4294:3:::0;4266:18:::1;:32::i;:::-;4317:30;::::0;;3236:25:29;;;4341:5:0::1;3292:2:29::0;3277:18;;3270:50;-1:-1:-1;;;;;4327:7:0::1;4317:30;::::0;::::1;::::0;3209:18:29;4317:30:0::1;;;;;;;3821:543;2542:20:7::0;1857:1;3068:7;:21;2888:208;2287:112:0;2355:11;;2331:4;;2355:11;;2354:12;:38;;;;;2388:4;2370:14;:12;:14::i;:::-;:22;;2354:38;2347:45;;2287:112;:::o;2536:412::-;2500:21:7;:19;:21::i;:::-;2608:8:0::1;2604:33;;;2625:12;;-1:-1:-1::0;;;2625:12:0::1;;;;;;;;;;;2604:33;2651:6;2661:1;2651:11:::0;2647:36:::1;;2671:12;;-1:-1:-1::0;;;2671:12:0::1;;;;;;;;;;;2647:36;2693:57;-1:-1:-1::0;;;;;2693:5:0::1;:22;2716:10;2736:4;2743:6:::0;2693:22:::1;:57::i;:::-;2774:30;::::0;-1:-1:-1;;;2774:30:0;;2798:4:::1;2774:30;::::0;::::1;747:51:29::0;2760:11:0::1;::::0;2774:5:::1;-1:-1:-1::0;;;;;2774:15:0::1;::::0;::::1;::::0;720:18:29;;2774:30:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2819:41;::::0;;210:25:29;;;266:2;251:18;;244:34;;;-1:-1:-1;294:18:29;;;287:50;2819:41:0;;244:34:29;;-1:-1:-1;2829:10:0::1;::::0;2819:41:::1;::::0;;;;198:2:29;2819:41:0;;::::1;2875:11;::::0;::::1;;2874:12;:27:::0;::::1;;;;2897:4;2890:3;:11;;2874:27;2870:71;;;2908:33;::::0;;2920:15:::1;522:25:29::0;;578:2;563:18;;556:34;;;2908:33:0::1;::::0;495:18:29;2908:33:0::1;;;;;;;2870:71;2594:354;2542:20:7::0;1857:1;3068:7;:21;2888:208;2542:20;2536:412:0;:::o;2138:143::-;2183:7;2209:8;:65;;2244:30;;-1:-1:-1;;;2244:30:0;;2268:4;2244:30;;;747:51:29;2244:5:0;-1:-1:-1;;;;;2244:15:0;;;;720:18:29;;2244:30:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2209:65::-;-1:-1:-1;2220:21:0;;2138:143::o;2575:307:7:-;1899:1;2702:7;;:18;2698:86;;2743:30;;-1:-1:-1;;;2743:30:7;;;;;;;;;;;2698:86;1899:1;2858:7;:17;2575:307::o;1219:160:6:-;1328:43;;-1:-1:-1;;;;;3712:32:29;;;1328:43:6;;;3694:51:29;3761:18;;;3754:34;;;1301:71:6;;1321:5;;1343:14;;;;;3667:18:29;;1328:43:6;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1328:43:6;;;;;;;;;;;1301:19;:71::i;:::-;1219:160;;;:::o;1618:188::-;1745:53;;-1:-1:-1;;;;;4019:32:29;;;1745:53:6;;;4001:51:29;4088:32;;;4068:18;;;4061:60;4137:18;;;4130:34;;;1718:81:6;;1738:5;;1760:18;;;;;3974::29;;1745:53:6;3799:371:29;1718:81:6;1618:188;;;;:::o;8370:720::-;8450:18;8478:19;8616:4;8613:1;8606:4;8600:11;8593:4;8587;8583:15;8580:1;8573:5;8566;8561:60;8673:7;8663:176;;8717:4;8711:11;8762:16;8759:1;8754:3;8739:40;8808:16;8803:3;8796:29;8663:176;-1:-1:-1;;8916:1:6;8910:8;8866:16;;-1:-1:-1;8942:15:6;;:68;;8994:11;9009:1;8994:16;;8942:68;;;-1:-1:-1;;;;;8960:26:6;;;:31;8942:68;8938:146;;;9033:40;;-1:-1:-1;;;9033:40:6;;-1:-1:-1;;;;;765:32:29;;9033:40:6;;;747:51:29;720:18;;9033:40:6;601:203:29;809:527;958:2;947:9;940:21;921:4;990:6;984:13;1033:6;1028:2;1017:9;1013:18;1006:34;1058:1;1068:140;1082:6;1079:1;1076:13;1068:140;;;1193:2;1177:14;;;1173:23;;1167:30;1162:2;1143:17;;;1139:26;1132:66;1097:10;1068:140;;;1072:3;1257:1;1252:2;1243:6;1232:9;1228:22;1224:31;1217:42;1327:2;1320;1316:7;1311:2;1303:6;1299:15;1295:29;1284:9;1280:45;1276:54;1268:62;;;809:527;;;;:::o;1937:180::-;1996:6;2049:2;2037:9;2028:7;2024:23;2020:32;2017:52;;;2065:1;2062;2055:12;2017:52;-1:-1:-1;2088:23:29;;1937:180;-1:-1:-1;1937:180:29:o;2122:380::-;2201:1;2197:12;;;;2244;;;2265:61;;2319:4;2311:6;2307:17;2297:27;;2265:61;2372:2;2364:6;2361:14;2341:18;2338:38;2335:161;;2418:10;2413:3;2409:20;2406:1;2399:31;2453:4;2450:1;2443:15;2481:4;2478:1;2471:15;2335:161;;2122:380;;;:::o;3331:184::-;3401:6;3454:2;3442:9;3433:7;3429:23;3425:32;3422:52;;;3470:1;3467;3460:12;3422:52;-1:-1:-1;3493:16:29;;3331:184;-1:-1:-1;3331:184:29:o","linkReferences":{},"immutableReferences":{"16":[{"start":467,"length":32},{"start":1338,"length":32},{"start":1568,"length":32},{"start":1781,"length":32},{"start":1910,"length":32},{"start":1971,"length":32}],"19":[{"start":590,"length":32},{"start":1876,"length":32},{"start":2241,"length":32},{"start":2305,"length":32},{"start":2677,"length":32}],"21":[{"start":167,"length":32},{"start":771,"length":32},{"start":1031,"length":32},{"start":1528,"length":32},{"start":2134,"length":32},{"start":2621,"length":32}],"23":[{"start":344,"length":32},{"start":663,"length":32},{"start":1208,"length":32},{"start":1450,"length":32},{"start":2077,"length":32},{"start":2505,"length":32}]}},"methodIdentifiers":{"asset()":"38d52e0f","assetBalance()":"c66f2455","canWithdraw()":"b51459fe","contribute(uint256)":"c1cbbca7","contributeNative()":"1f689935","creator()":"02d05d3f","goal()":"40193883","isNative()":"73cfc6b2","isWithdrawn()":"44aa5700","name()":"06fdde03","withdraw()":"3ccfd60b"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GoalNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributeNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contribute(uint256)\":{\"notice\":\"Contribute ERC20 (only for ERC20 vaults). Caller must have approved this contract.\"},\"contributeNative()\":{\"notice\":\"Explicit payable function (same as receive) for UIs.\"}},\"notice\":\"Vault holds either ONE ERC20 or native MON, chosen at deploy.         Anyone can contribute the chosen asset. Only creator can withdraw,         and only after balance >= goal. One-shot withdraw closes the vault.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":forge-std/=node_modules/forge-std/src/\"]},\"sources\":{\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Vault\\n * @notice Vault holds either ONE ERC20 or native MON, chosen at deploy.\\n *         Anyone can contribute the chosen asset. Only creator can withdraw,\\n *         and only after balance >= goal. One-shot withdraw closes the vault.\\n */\\ncontract Vault is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Immutable config\\n    address public immutable creator;\\n    IERC20  public immutable asset;      // zero when isNative == true\\n    bool    public immutable isNative;   // true => native MON vault\\n    uint256 public immutable goal;       // token units or wei (if native)\\n    string  public name;\\n\\n    // State\\n    bool public isWithdrawn;\\n\\n    // Events\\n    event Deposited(address indexed from, uint256 amount, uint256 newBalance, bool isNative);\\n    event GoalReached(uint256 timestamp, uint256 balance);\\n    event Withdrawn(address indexed to, uint256 amount, bool isNative);\\n\\n    // Errors\\n    error NotCreator();\\n    error GoalNotReached();\\n    error AlreadyWithdrawn();\\n    error InvalidParam();\\n    error ZeroAmount();\\n    error WrongAsset(); // sending wrong asset type\\n\\n    constructor(\\n        address _creator,\\n        IERC20 _asset,           // set to IERC20(address(0)) if native\\n        bool _isNative,\\n        uint256 _goal,\\n        string memory _name\\n    ) payable {\\n        // Invariants:\\n        // - if native: asset must be zero\\n        // - if ERC20 : asset must be non-zero\\n        if (_creator == address(0) || _goal == 0) revert InvalidParam();\\n        if (_isNative) {\\n            if (address(_asset) != address(0)) revert InvalidParam();\\n        } else {\\n            if (address(_asset) == address(0)) revert InvalidParam();\\n        }\\n        creator = _creator;\\n        asset = _asset;\\n        isNative = _isNative;\\n        goal = _goal;\\n        name = _name;\\n    }\\n\\n    // Views\\n    function assetBalance() public view returns (uint256) {\\n        return isNative ? address(this).balance : asset.balanceOf(address(this));\\n    }\\n\\n    function canWithdraw() public view returns (bool) {\\n        return !isWithdrawn && assetBalance() >= goal;\\n    }\\n\\n    // ---- Contributions ----\\n\\n    /// @notice Contribute ERC20 (only for ERC20 vaults). Caller must have approved this contract.\\n    function contribute(uint256 amount) external nonReentrant {\\n        if (isNative) revert WrongAsset();\\n        if (amount == 0) revert ZeroAmount();\\n        asset.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 bal = asset.balanceOf(address(this));\\n        emit Deposited(msg.sender, amount, bal, false);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    /// @notice Contribute native MON (only for native vaults).\\n    receive() external payable {\\n        if (!isNative) revert WrongAsset();\\n        if (msg.value == 0) revert ZeroAmount();\\n        uint256 bal = address(this).balance;\\n        emit Deposited(msg.sender, msg.value, bal, true);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    /// @notice Explicit payable function (same as receive) for UIs.\\n    function contributeNative() external payable nonReentrant {\\n        if (!isNative) revert WrongAsset();\\n        if (msg.value == 0) revert ZeroAmount();\\n        uint256 bal = address(this).balance;\\n        emit Deposited(msg.sender, msg.value, bal, true);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    // ---- Withdraw ----\\n\\n    function withdraw() external nonReentrant {\\n        if (msg.sender != creator) revert NotCreator();\\n        if (isWithdrawn) revert AlreadyWithdrawn();\\n\\n        uint256 bal = assetBalance();\\n        if (bal < goal) revert GoalNotReached();\\n\\n        isWithdrawn = true;\\n\\n        if (isNative) {\\n            (bool ok, ) = payable(creator).call{value: bal}(\\\"\\\");\\n            require(ok, \\\"native transfer failed\\\");\\n            emit Withdrawn(creator, bal, true);\\n        } else {\\n            asset.safeTransfer(creator, bal);\\n            emit Withdrawn(creator, bal, false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9eed3705eacf041870f33ce83a228cc98ea8d25f290b0cfbdf10480d227aa735\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_creator","type":"address"},{"internalType":"contract IERC20","name":"_asset","type":"address"},{"internalType":"bool","name":"_isNative","type":"bool"},{"internalType":"uint256","name":"_goal","type":"uint256"},{"internalType":"string","name":"_name","type":"string"}],"stateMutability":"payable","type":"constructor"},{"inputs":[],"type":"error","name":"AlreadyWithdrawn"},{"inputs":[],"type":"error","name":"GoalNotReached"},{"inputs":[],"type":"error","name":"InvalidParam"},{"inputs":[],"type":"error","name":"NotCreator"},{"inputs":[],"type":"error","name":"ReentrancyGuardReentrantCall"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"type":"error","name":"SafeERC20FailedOperation"},{"inputs":[],"type":"error","name":"WrongAsset"},{"inputs":[],"type":"error","name":"ZeroAmount"},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"uint256","name":"newBalance","type":"uint256","indexed":false},{"internalType":"bool","name":"isNative","type":"bool","indexed":false}],"type":"event","name":"Deposited","anonymous":false},{"inputs":[{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":false},{"internalType":"uint256","name":"balance","type":"uint256","indexed":false}],"type":"event","name":"GoalReached","anonymous":false},{"inputs":[{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"bool","name":"isNative","type":"bool","indexed":false}],"type":"event","name":"Withdrawn","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"asset","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"assetBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"canWithdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"contribute"},{"inputs":[],"stateMutability":"payable","type":"function","name":"contributeNative"},{"inputs":[],"stateMutability":"view","type":"function","name":"creator","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"goal","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isNative","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isWithdrawn","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"withdraw"},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{"contribute(uint256)":{"notice":"Contribute ERC20 (only for ERC20 vaults). Caller must have approved this contract."},"contributeNative()":{"notice":"Explicit payable function (same as receive) for UIs."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","forge-std/=node_modules/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/Vault.sol":"Vault"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/Vault.sol":{"keccak256":"0x9eed3705eacf041870f33ce83a228cc98ea8d25f290b0cfbdf10480d227aa735","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title Vault\n * @notice Vault holds either ONE ERC20 or native MON, chosen at deploy.\n *         Anyone can contribute the chosen asset. Only creator can withdraw,\n *         and only after balance >= goal. One-shot withdraw closes the vault.\n */\ncontract Vault is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Immutable config\n    address public immutable creator;\n    IERC20  public immutable asset;      // zero when isNative == true\n    bool    public immutable isNative;   // true => native MON vault\n    uint256 public immutable goal;       // token units or wei (if native)\n    string  public name;\n\n    // State\n    bool public isWithdrawn;\n\n    // Events\n    event Deposited(address indexed from, uint256 amount, uint256 newBalance, bool isNative);\n    event GoalReached(uint256 timestamp, uint256 balance);\n    event Withdrawn(address indexed to, uint256 amount, bool isNative);\n\n    // Errors\n    error NotCreator();\n    error GoalNotReached();\n    error AlreadyWithdrawn();\n    error InvalidParam();\n    error ZeroAmount();\n    error WrongAsset(); // sending wrong asset type\n\n    constructor(\n        address _creator,\n        IERC20 _asset,           // set to IERC20(address(0)) if native\n        bool _isNative,\n        uint256 _goal,\n        string memory _name\n    ) payable {\n        // Invariants:\n        // - if native: asset must be zero\n        // - if ERC20 : asset must be non-zero\n        if (_creator == address(0) || _goal == 0) revert InvalidParam();\n        if (_isNative) {\n            if (address(_asset) != address(0)) revert InvalidParam();\n        } else {\n            if (address(_asset) == address(0)) revert InvalidParam();\n        }\n        creator = _creator;\n        asset = _asset;\n        isNative = _isNative;\n        goal = _goal;\n        name = _name;\n    }\n\n    // Views\n    function assetBalance() public view returns (uint256) {\n        return isNative ? address(this).balance : asset.balanceOf(address(this));\n    }\n\n    function canWithdraw() public view returns (bool) {\n        return !isWithdrawn && assetBalance() >= goal;\n    }\n\n    // ---- Contributions ----\n\n    /// @notice Contribute ERC20 (only for ERC20 vaults). Caller must have approved this contract.\n    function contribute(uint256 amount) external nonReentrant {\n        if (isNative) revert WrongAsset();\n        if (amount == 0) revert ZeroAmount();\n        asset.safeTransferFrom(msg.sender, address(this), amount);\n        uint256 bal = asset.balanceOf(address(this));\n        emit Deposited(msg.sender, amount, bal, false);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    /// @notice Contribute native MON (only for native vaults).\n    receive() external payable {\n        if (!isNative) revert WrongAsset();\n        if (msg.value == 0) revert ZeroAmount();\n        uint256 bal = address(this).balance;\n        emit Deposited(msg.sender, msg.value, bal, true);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    /// @notice Explicit payable function (same as receive) for UIs.\n    function contributeNative() external payable nonReentrant {\n        if (!isNative) revert WrongAsset();\n        if (msg.value == 0) revert ZeroAmount();\n        uint256 bal = address(this).balance;\n        emit Deposited(msg.sender, msg.value, bal, true);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    // ---- Withdraw ----\n\n    function withdraw() external nonReentrant {\n        if (msg.sender != creator) revert NotCreator();\n        if (isWithdrawn) revert AlreadyWithdrawn();\n\n        uint256 bal = assetBalance();\n        if (bal < goal) revert GoalNotReached();\n\n        isWithdrawn = true;\n\n        if (isNative) {\n            (bool ok, ) = payable(creator).call{value: bal}(\"\");\n            require(ok, \"native transfer failed\");\n            emit Withdrawn(creator, bal, true);\n        } else {\n            asset.safeTransfer(creator, bal);\n            emit Withdrawn(creator, bal, false);\n        }\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol":{"keccak256":"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC165.sol":{"keccak256":"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol":{"keccak256":"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n","license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n","license":"MIT"}},"version":1},"id":0}