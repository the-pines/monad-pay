{"abi":[{"type":"constructor","inputs":[{"name":"_creator","type":"address","internalType":"address"},{"name":"_asset","type":"address","internalType":"contract IERC20"},{"name":"_isNative","type":"bool","internalType":"bool"},{"name":"_goal","type":"uint256","internalType":"uint256"},{"name":"_name","type":"string","internalType":"string"},{"name":"trustedForwarder","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"receive","stateMutability":"payable"},{"type":"function","name":"asset","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IERC20"}],"stateMutability":"view"},{"type":"function","name":"assetBalance","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"canWithdraw","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"contribute","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"contributeNative","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"contributeWithPermit","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"deadline","type":"uint256","internalType":"uint256"},{"name":"v","type":"uint8","internalType":"uint8"},{"name":"r","type":"bytes32","internalType":"bytes32"},{"name":"s","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"creator","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"goal","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"isNative","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isTrustedForwarder","inputs":[{"name":"forwarder","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isWithdrawn","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"trustedForwarder","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"withdraw","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Deposited","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newBalance","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"isNative","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"GoalReached","inputs":[{"name":"timestamp","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"balance","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Withdrawn","inputs":[{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"isNative","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"error","name":"AlreadyWithdrawn","inputs":[]},{"type":"error","name":"GoalNotReached","inputs":[]},{"type":"error","name":"InvalidParam","inputs":[]},{"type":"error","name":"NotCreator","inputs":[]},{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]},{"type":"error","name":"SafeERC20FailedOperation","inputs":[{"name":"token","type":"address","internalType":"address"}]},{"type":"error","name":"WrongAsset","inputs":[]},{"type":"error","name":"ZeroAmount","inputs":[]}],"bytecode":{"object":"0x61012060405234801561001157600080fd5b506040516116b93803806116b98339810160408190526100309161013c565b60016000556001600160a01b038082166080528616158061004f575082155b1561006d57604051633494a40d60e21b815260040160405180910390fd5b83156100a0576001600160a01b0385161561009b57604051633494a40d60e21b815260040160405180910390fd5b6100c7565b6001600160a01b0385166100c757604051633494a40d60e21b815260040160405180910390fd5b6001600160a01b0380871660a052851660c05283151560e05261010083905260016100f283826102e8565b505050505050506103a6565b6001600160a01b038116811461011357600080fd5b50565b8051610121816100fe565b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c0878903121561015557600080fd5b8651610160816100fe565b6020880151909650610171816100fe565b6040880151909550801515811461018757600080fd5b6060880151608089015191955093506001600160401b038111156101aa57600080fd5b87016000601f82018a136101bc578081fd5b81516001600160401b038111156101d5576101d5610126565b604051601f8201601f19908116603f011681016001600160401b038111828210171561020357610203610126565b6040528181528382016020018c101561021a578283fd5b825b828110156102385760208186018101518383018201520161021c565b50908101602001919091529250610253905060a08801610116565b90509295509295509295565b600181811c9082168061027357607f821691505b60208210810361029357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102e357806000526020600020601f840160051c810160208510156102c05750805b601f840160051c820191505b818110156102e057600081556001016102cc565b50505b505050565b81516001600160401b0381111561030157610301610126565b6103158161030f845461025f565b84610299565b6020601f82116001811461034957600083156103315750848201515b600019600385901b1c1916600184901b1784556102e0565b600084815260208120601f198516915b828110156103795787850151825560209485019460019092019101610359565b50848210156103975786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60805160a05160c05160e0516101005161121a61049f60003960008181610187015281816102b40152818161057501528181610665015281816108d801528181610a8c0152610dde01526000818160e80152818161036d015281816104c4015281816106b30152818161091101528181610aee0152610ba801526000818161026b0152818161080f01528181610984015281816109c401528181610b2601528181610c0801528181610cd60152610d160152600081816101f0015281816105dc015281816106db015281816107b001528181610831015261086e01526000818161032b0152818161039e0152610f29015261121a6000f3fe6080604052600436106100e15760003560e01c8063572b6c051161007f578063b51459fe11610059578063b51459fe146103c2578063c1cbbca7146103d7578063c66f2455146103f7578063ce40a3081461040c57600080fd5b8063572b6c051461030e57806373cfc6b21461035b5780637da0a8771461038f57600080fd5b806338d52e0f116100bb57806338d52e0f146102595780633ccfd60b1461028d57806340193883146102a257806344aa5700146102e457600080fd5b806302d05d3f146101de57806306fdde031461022f5780631f6899351461025157600080fd5b366101d9577f00000000000000000000000000000000000000000000000000000000000000006101245760405163f170c67f60e01b815260040160405180910390fd5b3460000361014557604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133916000805160206111c5833981519152919081900360600190a260025460ff161580156101aa57507f00000000000000000000000000000000000000000000000000000000000000008110155b156101d75760408051428152602081018390526000805160206111a5833981519152910160405180910390a15b005b600080fd5b3480156101ea57600080fd5b506102127f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023b57600080fd5b5061024461042c565b6040516102269190610ff4565b6101d76104ba565b34801561026557600080fd5b506102127f000000000000000000000000000000000000000000000000000000000000000081565b34801561029957600080fd5b506101d76105d2565b3480156102ae57600080fd5b506102d67f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610226565b3480156102f057600080fd5b506002546102fe9060ff1681565b6040519015158152602001610226565b34801561031a57600080fd5b506102fe610329366004611042565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b34801561036757600080fd5b506102fe7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039b57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610212565b3480156103ce57600080fd5b506102fe6108c5565b3480156103e357600080fd5b506101d76103f2366004611072565b610907565b34801561040357600080fd5b506102d6610aea565b34801561041857600080fd5b506101d761042736600461108b565b610b9e565b60018054610439906110da565b80601f0160208091040260200160405190810160405280929190818152602001828054610465906110da565b80156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b505050505081565b6104c2610e40565b7f00000000000000000000000000000000000000000000000000000000000000006105005760405163f170c67f60e01b815260040160405180910390fd5b3460000361052157604051631f2a200560e01b815260040160405180910390fd5b4761052a610e6a565b604080513481526020810184905260018183015290516001600160a01b0392909216916000805160206111c58339815191529181900360600190a260025460ff1615801561059857507f00000000000000000000000000000000000000000000000000000000000000008110155b156105c55760408051428152602081018390526000805160206111a5833981519152910160405180910390a15b506105d06001600055565b565b6105da610e40565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661060c610e6a565b6001600160a01b031614610633576040516393687c0b60e01b815260040160405180910390fd5b60025460ff161561065757604051636507689f60e01b815260040160405180910390fd5b6000610661610aea565b90507f00000000000000000000000000000000000000000000000000000000000000008110156106a4576040516378c754c960e01b815260040160405180910390fd5b6002805460ff191660011790557f0000000000000000000000000000000000000000000000000000000000000000156108025760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610744576040519150601f19603f3d011682016040523d82523d6000602084013e610749565b606091505b50509050806107985760405162461bcd60e51b81526020600482015260166024820152751b985d1a5d99481d1c985b9cd9995c8819985a5b195960521b60448201526064015b60405180910390fd5b60408051838152600160208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a2506105c5565b6108566001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610e74565b60408051828152600060208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a2506105d06001600055565b60025460009060ff1615801561090257507f00000000000000000000000000000000000000000000000000000000000000006108ff610aea565b10155b905090565b61090f610e40565b7f00000000000000000000000000000000000000000000000000000000000000001561094e5760405163f170c67f60e01b815260040160405180910390fd5b8060000361096f57604051631f2a200560e01b815260040160405180910390fd5b6109ac61097a610e6a565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903084610ed8565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a379190611114565b9050610a41610e6a565b604080518481526020810184905260008183015290516001600160a01b0392909216916000805160206111c58339815191529181900360600190a260025460ff16158015610aaf57507f00000000000000000000000000000000000000000000000000000000000000008110155b15610adc5760408051428152602081018390526000805160206111a5833981519152910160405180910390a15b50610ae76001600055565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000610b99576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109029190611114565b504790565b610ba6610e40565b7f000000000000000000000000000000000000000000000000000000000000000015610be55760405163f170c67f60e01b815260040160405180910390fd5b84600003610c0657604051631f2a200560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d505accf610c3d610e6a565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905260e401600060405180830381600087803b158015610ca957600080fd5b505af1158015610cbd573d6000803e3d6000fd5b50505050610cfe610ccc610e6a565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903088610ed8565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d899190611114565b9050610d93610e6a565b604080518881526020810184905260008183015290516001600160a01b0392909216916000805160206111c58339815191529181900360600190a260025460ff16158015610e0157507f00000000000000000000000000000000000000000000000000000000000000008110155b15610e2e5760408051428152602081018390526000805160206111a5833981519152910160405180910390a15b50610e396001600055565b5050505050565b600260005403610e6357604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000610902610f17565b6040516001600160a01b03838116602483015260448201839052610ed391859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610f83565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610f119186918216906323b872dd90608401610ea1565b50505050565b6000366014808210801590610f5457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633145b15610f7b57610f683682840381600061112d565b610f7191611157565b60601c9250505090565b339250505090565b600080602060008451602086016000885af180610fa6576040513d6000823e3d81fd5b50506000513d91508115610fbe578060011415610fcb565b6001600160a01b0384163b155b15610f1157604051635274afe760e01b81526001600160a01b038516600482015260240161078f565b602081526000825180602084015260005b818110156110225760208186018101516040868401015201611005565b506000604082850101526040601f19601f83011684010191505092915050565b60006020828403121561105457600080fd5b81356001600160a01b038116811461106b57600080fd5b9392505050565b60006020828403121561108457600080fd5b5035919050565b600080600080600060a086880312156110a357600080fd5b8535945060208601359350604086013560ff811681146110c257600080fd5b94979396509394606081013594506080013592915050565b600181811c908216806110ee57607f821691505b60208210810361110e57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561112657600080fd5b5051919050565b6000808585111561113d57600080fd5b8386111561114a57600080fd5b5050820193919092039150565b80356bffffffffffffffffffffffff19811690601484101561119d576bffffffffffffffffffffffff196bffffffffffffffffffffffff198560140360031b1b82161691505b509291505056fe85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40a2646970667358221220eb473c74c259fcf8ef82e11dd0b9e6a9787d5b809126ea067a4f3d716f9a8b7564736f6c634300081c0033","sourceMap":"662:4748:0:-:0;;;1394:619;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1857:1:9;2061:7;:21;-1:-1:-1;;;;;1500:37:5;;;;;1629:22:0;::::1;::::0;;:36:::1;;-1:-1:-1::0;1655:10:0;;1629:36:::1;1625:63;;;1674:14;;-1:-1:-1::0;;;1674:14:0::1;;;;;;;;;;;1625:63;1702:9;1698:183;;;-1:-1:-1::0;;;;;1731:29:0;::::1;::::0;1727:56:::1;;1769:14;;-1:-1:-1::0;;;1769:14:0::1;;;;;;;;;;;1727:56;1698:183;;;-1:-1:-1::0;;;;;1818:29:0;::::1;1814:56;;1856:14;;-1:-1:-1::0;;;1856:14:0::1;;;;;;;;;;;1814:56;-1:-1:-1::0;;;;;1890:18:0;;::::1;;::::0;1918:14;::::1;;::::0;1942:20;::::1;;;::::0;1972:12:::1;::::0;;;1994:4:::1;:12;2001:5:::0;1994:4;:12:::1;:::i;:::-;;1394:619:::0;;;;;;662:4748;;14:131:31;-1:-1:-1;;;;;89:31:31;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:138::-;229:13;;251:31;229:13;251:31;:::i;:::-;150:138;;;:::o;293:127::-;354:10;349:3;345:20;342:1;335:31;385:4;382:1;375:15;409:4;406:1;399:15;425:1703;562:6;570;578;586;594;602;655:3;643:9;634:7;630:23;626:33;623:53;;;672:1;669;662:12;623:53;704:9;698:16;723:31;748:5;723:31;:::i;:::-;823:2;808:18;;802:25;773:5;;-1:-1:-1;836:33:31;802:25;836:33;:::i;:::-;940:2;925:18;;919:25;888:7;;-1:-1:-1;982:15:31;;975:23;963:36;;953:64;;1013:1;1010;1003:12;953:64;1083:2;1068:18;;1062:25;1131:3;1116:19;;1110:26;1036:7;;-1:-1:-1;1062:25:31;-1:-1:-1;;;;;;1148:30:31;;1145:50;;;1191:1;1188;1181:12;1145:50;1214:22;;1258:1;1290:4;1282:13;;1278:27;-1:-1:-1;1268:63:31;;1323:5;1316;1309:20;1268:63;1354:9;;-1:-1:-1;;;;;1375:30:31;;1372:56;;;1408:18;;:::i;:::-;1457:2;1451:9;1549:2;1511:17;;-1:-1:-1;;1507:31:31;;;1540:2;1503:40;1499:54;1487:67;;-1:-1:-1;;;;;1569:34:31;;1605:22;;;1566:62;1563:88;;;1631:18;;:::i;:::-;1667:2;1660:22;1691;;;1732:15;;;1749:2;1728:24;1725:37;-1:-1:-1;1722:65:31;;;1779:5;1772;1765:20;1722:65;1805:5;1819:133;1833:6;1830:1;1827:13;1819:133;;;1937:2;1925:10;;;1921:19;;1915:26;1894:14;;;1890:23;;1883:59;1848:10;1819:133;;;-1:-1:-1;1972:19:31;;;1993:2;1968:28;1961:43;;;;1976:6;-1:-1:-1;2072:50:31;;-1:-1:-1;2117:3:31;2102:19;;2072:50;:::i;:::-;2062:60;;425:1703;;;;;;;;:::o;2133:380::-;2212:1;2208:12;;;;2255;;;2276:61;;2330:4;2322:6;2318:17;2308:27;;2276:61;2383:2;2375:6;2372:14;2352:18;2349:38;2346:161;;2429:10;2424:3;2420:20;2417:1;2410:31;2464:4;2461:1;2454:15;2492:4;2489:1;2482:15;2346:161;;2133:380;;;:::o;2644:518::-;2746:2;2741:3;2738:11;2735:421;;;2782:5;2779:1;2772:16;2826:4;2823:1;2813:18;2896:2;2884:10;2880:19;2877:1;2873:27;2867:4;2863:38;2932:4;2920:10;2917:20;2914:47;;;-1:-1:-1;2955:4:31;2914:47;3010:2;3005:3;3001:12;2998:1;2994:20;2988:4;2984:31;2974:41;;3065:81;3083:2;3076:5;3073:13;3065:81;;;3142:1;3128:16;;3109:1;3098:13;3065:81;;;3069:3;;2735:421;2644:518;;;:::o;3338:1299::-;3458:10;;-1:-1:-1;;;;;3480:30:31;;3477:56;;;3513:18;;:::i;:::-;3542:97;3632:6;3592:38;3624:4;3618:11;3592:38;:::i;:::-;3586:4;3542:97;:::i;:::-;3688:4;3719:2;3708:14;;3736:1;3731:649;;;;4424:1;4441:6;4438:89;;;-1:-1:-1;4493:19:31;;;4487:26;4438:89;-1:-1:-1;;3295:1:31;3291:11;;;3287:24;3283:29;3273:40;3319:1;3315:11;;;3270:57;4540:81;;3701:930;;3731:649;2591:1;2584:14;;;2628:4;2615:18;;-1:-1:-1;;3767:20:31;;;3885:222;3899:7;3896:1;3893:14;3885:222;;;3981:19;;;3975:26;3960:42;;4088:4;4073:20;;;;4041:1;4029:14;;;;3915:12;3885:222;;;3889:3;4135:6;4126:7;4123:19;4120:201;;;4196:19;;;4190:26;-1:-1:-1;;4279:1:31;4275:14;;;4291:3;4271:24;4267:37;4263:42;4248:58;4233:74;;4120:201;-1:-1:-1;;;;4367:1:31;4351:14;;;4347:22;4334:36;;-1:-1:-1;3338:1299:31:o;:::-;662:4748:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x6080604052600436106100e15760003560e01c8063572b6c051161007f578063b51459fe11610059578063b51459fe146103c2578063c1cbbca7146103d7578063c66f2455146103f7578063ce40a3081461040c57600080fd5b8063572b6c051461030e57806373cfc6b21461035b5780637da0a8771461038f57600080fd5b806338d52e0f116100bb57806338d52e0f146102595780633ccfd60b1461028d57806340193883146102a257806344aa5700146102e457600080fd5b806302d05d3f146101de57806306fdde031461022f5780631f6899351461025157600080fd5b366101d9577f00000000000000000000000000000000000000000000000000000000000000006101245760405163f170c67f60e01b815260040160405180910390fd5b3460000361014557604051631f2a200560e01b815260040160405180910390fd5b604080513481524760208201819052600182840152915133916000805160206111c5833981519152919081900360600190a260025460ff161580156101aa57507f00000000000000000000000000000000000000000000000000000000000000008110155b156101d75760408051428152602081018390526000805160206111a5833981519152910160405180910390a15b005b600080fd5b3480156101ea57600080fd5b506102127f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023b57600080fd5b5061024461042c565b6040516102269190610ff4565b6101d76104ba565b34801561026557600080fd5b506102127f000000000000000000000000000000000000000000000000000000000000000081565b34801561029957600080fd5b506101d76105d2565b3480156102ae57600080fd5b506102d67f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610226565b3480156102f057600080fd5b506002546102fe9060ff1681565b6040519015158152602001610226565b34801561031a57600080fd5b506102fe610329366004611042565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b34801561036757600080fd5b506102fe7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039b57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610212565b3480156103ce57600080fd5b506102fe6108c5565b3480156103e357600080fd5b506101d76103f2366004611072565b610907565b34801561040357600080fd5b506102d6610aea565b34801561041857600080fd5b506101d761042736600461108b565b610b9e565b60018054610439906110da565b80601f0160208091040260200160405190810160405280929190818152602001828054610465906110da565b80156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b505050505081565b6104c2610e40565b7f00000000000000000000000000000000000000000000000000000000000000006105005760405163f170c67f60e01b815260040160405180910390fd5b3460000361052157604051631f2a200560e01b815260040160405180910390fd5b4761052a610e6a565b604080513481526020810184905260018183015290516001600160a01b0392909216916000805160206111c58339815191529181900360600190a260025460ff1615801561059857507f00000000000000000000000000000000000000000000000000000000000000008110155b156105c55760408051428152602081018390526000805160206111a5833981519152910160405180910390a15b506105d06001600055565b565b6105da610e40565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661060c610e6a565b6001600160a01b031614610633576040516393687c0b60e01b815260040160405180910390fd5b60025460ff161561065757604051636507689f60e01b815260040160405180910390fd5b6000610661610aea565b90507f00000000000000000000000000000000000000000000000000000000000000008110156106a4576040516378c754c960e01b815260040160405180910390fd5b6002805460ff191660011790557f0000000000000000000000000000000000000000000000000000000000000000156108025760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610744576040519150601f19603f3d011682016040523d82523d6000602084013e610749565b606091505b50509050806107985760405162461bcd60e51b81526020600482015260166024820152751b985d1a5d99481d1c985b9cd9995c8819985a5b195960521b60448201526064015b60405180910390fd5b60408051838152600160208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a2506105c5565b6108566001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610e74565b60408051828152600060208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5910160405180910390a2506105d06001600055565b60025460009060ff1615801561090257507f00000000000000000000000000000000000000000000000000000000000000006108ff610aea565b10155b905090565b61090f610e40565b7f00000000000000000000000000000000000000000000000000000000000000001561094e5760405163f170c67f60e01b815260040160405180910390fd5b8060000361096f57604051631f2a200560e01b815260040160405180910390fd5b6109ac61097a610e6a565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903084610ed8565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a379190611114565b9050610a41610e6a565b604080518481526020810184905260008183015290516001600160a01b0392909216916000805160206111c58339815191529181900360600190a260025460ff16158015610aaf57507f00000000000000000000000000000000000000000000000000000000000000008110155b15610adc5760408051428152602081018390526000805160206111a5833981519152910160405180910390a15b50610ae76001600055565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000610b99576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109029190611114565b504790565b610ba6610e40565b7f000000000000000000000000000000000000000000000000000000000000000015610be55760405163f170c67f60e01b815260040160405180910390fd5b84600003610c0657604051631f2a200560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d505accf610c3d610e6a565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905260e401600060405180830381600087803b158015610ca957600080fd5b505af1158015610cbd573d6000803e3d6000fd5b50505050610cfe610ccc610e6a565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903088610ed8565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d899190611114565b9050610d93610e6a565b604080518881526020810184905260008183015290516001600160a01b0392909216916000805160206111c58339815191529181900360600190a260025460ff16158015610e0157507f00000000000000000000000000000000000000000000000000000000000000008110155b15610e2e5760408051428152602081018390526000805160206111a5833981519152910160405180910390a15b50610e396001600055565b5050505050565b600260005403610e6357604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000610902610f17565b6040516001600160a01b03838116602483015260448201839052610ed391859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610f83565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610f119186918216906323b872dd90608401610ea1565b50505050565b6000366014808210801590610f5457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633145b15610f7b57610f683682840381600061112d565b610f7191611157565b60601c9250505090565b339250505090565b600080602060008451602086016000885af180610fa6576040513d6000823e3d81fd5b50506000513d91508115610fbe578060011415610fcb565b6001600160a01b0384163b155b15610f1157604051635274afe760e01b81526001600160a01b038516600482015260240161078f565b602081526000825180602084015260005b818110156110225760208186018101516040868401015201611005565b506000604082850101526040601f19601f83011684010191505092915050565b60006020828403121561105457600080fd5b81356001600160a01b038116811461106b57600080fd5b9392505050565b60006020828403121561108457600080fd5b5035919050565b600080600080600060a086880312156110a357600080fd5b8535945060208601359350604086013560ff811681146110c257600080fd5b94979396509394606081013594506080013592915050565b600181811c908216806110ee57607f821691505b60208210810361110e57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561112657600080fd5b5051919050565b6000808585111561113d57600080fd5b8386111561114a57600080fd5b5050820193919092039150565b80356bffffffffffffffffffffffff19811690601484101561119d576bffffffffffffffffffffffff196bffffffffffffffffffffffff198560140360031b1b82161691505b509291505056fe85b3ed4e45559c5f41fb220aa4ac86a440dfc741f219089de694242940aaa09c65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40a2646970667358221220eb473c74c259fcf8ef82e11dd0b9e6a9787d5b809126ea067a4f3d716f9a8b7564736f6c634300081c0033","sourceMap":"662:4748:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4078:8;4073:34;;4095:12;;-1:-1:-1;;;4095:12:0;;;;;;;;;;;4073:34;4311:9;4324:1;4311:14;4307:39;;4334:12;;-1:-1:-1;;;4334:12:0;;;;;;;;;;;4307:39;4406:43;;;4428:9;210:25:31;;4370:21:0;266:2:31;251:18;;244:34;;;4444:4:0;294:18:31;;;287:50;4406:43:0;;4416:10;;-1:-1:-1;;;;;;;;;;;4406:43:0;;;;;198:2:31;4406:43:0;;;4495:11;;;;4494:12;:27;;;;;4517:4;4510:3;:11;;4494:27;4490:71;;;4528:33;;;4540:15;522:25:31;;578:2;563:18;;556:34;;;-1:-1:-1;;;;;;;;;;;4528:33:0;495:18:31;4528:33:0;;;;;;;4490:71;4063:505;662:4748;;;;751:32;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;765:32:31;;;747:51;;735:2;720:18;751:32:0;;;;;;;;914:19;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3602:344::-;;;:::i;789:30::-;;;;;;;;;;;;;;;4575:587;;;;;;;;;;;;;:::i;873:29::-;;;;;;;;;;;;;;;;;;1710:25:31;;;1698:2;1683:18;873:29:0;1564:177:31;953:23:0;;;;;;;;;;-1:-1:-1;953:23:0;;;;;;;;;;;1911:14:31;;1904:22;1886:41;;1874:2;1859:18;953:23:0;1746:187:31;1832:137:5;;;;;;;;;;-1:-1:-1;1832:137:5;;;;;:::i;:::-;1707:17;-1:-1:-1;;;;;1931:31:5;;;;;;;1832:137;831:33:0;;;;;;;;;;;;;;;1624:107:5;;;;;;;;;;-1:-1:-1;1707:17:5;1624:107;;2181:112:0;;;;;;;;;;;;;:::i;2406:416::-;;;;;;;;;;-1:-1:-1;2406:416:0;;;;;:::i;:::-;;:::i;2032:143::-;;;;;;;;;;;;;:::i;2906:606::-;;;;;;;;;;-1:-1:-1;2906:606:0;;;;;:::i;:::-;;:::i;914:19::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3602:344::-;2500:21:9;:19;:21::i;:::-;3675:8:0::1;3670:34;;3692:12;;-1:-1:-1::0;;;3692:12:0::1;;;;;;;;;;;3670:34;3718:9;3731:1;3718:14:::0;3714:39:::1;;3741:12;;-1:-1:-1::0;;;3741:12:0::1;;;;;;;;;;;3714:39;3777:21;3823:12;:10;:12::i;:::-;3813:45;::::0;;3837:9:::1;210:25:31::0;;266:2;251:18;;244:34;;;3853:4:0::1;294:18:31::0;;;287:50;3813:45:0;;-1:-1:-1;;;;;3813:45:0;;;::::1;::::0;-1:-1:-1;;;;;;;;;;;3813:45:0;;;;198:2:31;3813:45:0;;::::1;3873:11;::::0;::::1;;3872:12;:27:::0;::::1;;;;3895:4;3888:3;:11;;3872:27;3868:71;;;3906:33;::::0;;3918:15:::1;522:25:31::0;;578:2;563:18;;556:34;;;-1:-1:-1;;;;;;;;;;;3906:33:0;495:18:31;3906:33:0::1;;;;;;;3868:71;3660:286;2542:20:9::0;1857:1;3068:7;:21;2888:208;2542:20;3602:344:0:o;4575:587::-;2500:21:9;:19;:21::i;:::-;4647:7:0::1;-1:-1:-1::0;;;;;4631:23:0::1;:12;:10;:12::i;:::-;-1:-1:-1::0;;;;;4631:23:0::1;;4627:48;;4663:12;;-1:-1:-1::0;;;4663:12:0::1;;;;;;;;;;;4627:48;4689:11;::::0;::::1;;4685:42;;;4709:18;;-1:-1:-1::0;;;4709:18:0::1;;;;;;;;;;;4685:42;4738:11;4752:14;:12;:14::i;:::-;4738:28;;4786:4;4780:3;:10;4776:39;;;4799:16;;-1:-1:-1::0;;;4799:16:0::1;;;;;;;;;;;4776:39;4826:11;:18:::0;;-1:-1:-1;;4826:18:0::1;4840:4;4826:18;::::0;;4859:8:::1;4855:301;;;4884:7;4905;-1:-1:-1::0;;;;;4897:21:0::1;4926:3;4897:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4883:51;;;4956:2;4948:37;;;::::0;-1:-1:-1;;;4948:37:0;;4015:2:31;4948:37:0::1;::::0;::::1;3997:21:31::0;4054:2;4034:18;;;4027:30;-1:-1:-1;;;4073:18:31;;;4066:52;4135:18;;4948:37:0::1;;;;;;;;;5004:29;::::0;;4332:25:31;;;5028:4:0::1;4388:2:31::0;4373:18;;4366:50;-1:-1:-1;;;;;5014:7:0::1;5004:29;::::0;::::1;::::0;4305:18:31;5004:29:0::1;;;;;;;4869:175;4855:301;;;5064:32;-1:-1:-1::0;;;;;5064:5:0::1;:18;5083:7;5092:3:::0;5064:18:::1;:32::i;:::-;5115:30;::::0;;4332:25:31;;;5139:5:0::1;4388:2:31::0;4373:18;;4366:50;-1:-1:-1;;;;;5125:7:0::1;5115:30;::::0;::::1;::::0;4305:18:31;5115:30:0::1;;;;;;;4617:545;2542:20:9::0;1857:1;3068:7;:21;2888:208;2181:112:0;2249:11;;2225:4;;2249:11;;2248:12;:38;;;;;2282:4;2264:14;:12;:14::i;:::-;:22;;2248:38;2241:45;;2181:112;:::o;2406:416::-;2500:21:9;:19;:21::i;:::-;2478:8:0::1;2474:33;;;2495:12;;-1:-1:-1::0;;;2495:12:0::1;;;;;;;;;;;2474:33;2521:6;2531:1;2521:11:::0;2517:36:::1;;2541:12;;-1:-1:-1::0;;;2541:12:0::1;;;;;;;;;;;2517:36;2563:59;2586:12;:10;:12::i;:::-;-1:-1:-1::0;;;;;2563:5:0::1;:22;::::0;2608:4:::1;2615:6:::0;2563:22:::1;:59::i;:::-;2646:30;::::0;-1:-1:-1;;;2646:30:0;;2670:4:::1;2646:30;::::0;::::1;747:51:31::0;2632:11:0::1;::::0;2646:5:::1;-1:-1:-1::0;;;;;2646:15:0::1;::::0;::::1;::::0;720:18:31;;2646:30:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2632:44;;2701:12;:10;:12::i;:::-;2691:43;::::0;;210:25:31;;;266:2;251:18;;244:34;;;-1:-1:-1;294:18:31;;;287:50;2691:43:0;;-1:-1:-1;;;;;2691:43:0;;;::::1;::::0;-1:-1:-1;;;;;;;;;;;2691:43:0;;;;198:2:31;2691:43:0;;::::1;2749:11;::::0;::::1;;2748:12;:27:::0;::::1;;;;2771:4;2764:3;:11;;2748:27;2744:71;;;2782:33;::::0;;2794:15:::1;522:25:31::0;;578:2;563:18;;556:34;;;-1:-1:-1;;;;;;;;;;;2782:33:0;495:18:31;2782:33:0::1;;;;;;;2744:71;2464:358;2542:20:9::0;1857:1;3068:7;:21;2888:208;2542:20;2406:416:0;:::o;2032:143::-;2077:7;2103:8;:65;;2138:30;;-1:-1:-1;;;2138:30:0;;2162:4;2138:30;;;747:51:31;2138:5:0;-1:-1:-1;;;;;2138:15:0;;;;720:18:31;;2138:30:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2103:65::-;-1:-1:-1;2114:21:0;;2032:143::o;2906:606::-;2500:21:9;:19;:21::i;:::-;3067:8:0::1;3063:33;;;3084:12;;-1:-1:-1::0;;;3084:12:0::1;;;;;;;;;;;3063:33;3110:6;3120:1;3110:11:::0;3106:36:::1;;3130:12;;-1:-1:-1::0;;;3130:12:0::1;;;;;;;;;;;3106:36;3173:5;-1:-1:-1::0;;;;;3152:35:0::1;;3188:12;:10;:12::i;:::-;3152:91;::::0;-1:-1:-1;;;;;;3152:91:0::1;::::0;;;;;;-1:-1:-1;;;;;4945:32:31;;;3152:91:0::1;::::0;::::1;4927:51:31::0;3210:4:0::1;4994:18:31::0;;;4987:60;5063:18;;;5056:34;;;5106:18;;;5099:34;;;5182:4;5170:17;;5149:19;;;5142:46;5204:19;;;5197:35;;;5248:19;;;5241:35;;;4899:19;;3152:91:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3253:59;3276:12;:10;:12::i;:::-;-1:-1:-1::0;;;;;3253:5:0::1;:22;::::0;3298:4:::1;3305:6:::0;3253:22:::1;:59::i;:::-;3336:30;::::0;-1:-1:-1;;;3336:30:0;;3360:4:::1;3336:30;::::0;::::1;747:51:31::0;3322:11:0::1;::::0;3336:5:::1;-1:-1:-1::0;;;;;3336:15:0::1;::::0;::::1;::::0;720:18:31;;3336:30:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3322:44;;3391:12;:10;:12::i;:::-;3381:43;::::0;;210:25:31;;;266:2;251:18;;244:34;;;-1:-1:-1;294:18:31;;;287:50;3381:43:0;;-1:-1:-1;;;;;3381:43:0;;;::::1;::::0;-1:-1:-1;;;;;;;;;;;3381:43:0;;;;198:2:31;3381:43:0;;::::1;3439:11;::::0;::::1;;3438:12;:27:::0;::::1;;;;3461:4;3454:3;:11;;3438:27;3434:71;;;3472:33;::::0;;3484:15:::1;522:25:31::0;;578:2;563:18;;556:34;;;-1:-1:-1;;;;;;;;;;;3472:33:0;495:18:31;3472:33:0::1;;;;;;;3434:71;3053:459;2542:20:9::0;1857:1;3068:7;:21;2888:208;2542:20;2906:606:0;;;;;:::o;2575:307:9:-;1899:1;2702:7;;:18;2698:86;;2743:30;;-1:-1:-1;;;2743:30:9;;;;;;;;;;;2698:86;1899:1;2858:7;:17;2575:307::o;5168:116:0:-;5222:9;5250:27;:25;:27::i;1219:160:7:-;1328:43;;-1:-1:-1;;;;;5479:32:31;;;1328:43:7;;;5461:51:31;5528:18;;;5521:34;;;1301:71:7;;1321:5;;1343:14;;;;;5434:18:31;;1328:43:7;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1328:43:7;;;;;;;;;;;1301:19;:71::i;:::-;1219:160;;;:::o;1618:188::-;1745:53;;-1:-1:-1;;;;;5786:32:31;;;1745:53:7;;;5768:51:31;5855:32;;;5835:18;;;5828:60;5904:18;;;5897:34;;;1718:81:7;;1738:5;;1760:18;;;;;5741::31;;1745:53:7;5566:371:31;1718:81:7;1618:188;;;;:::o;2206:471:5:-;2268:7;2312:8;3567:2;2403:37;;;;;;:71;;-1:-1:-1;1707:17:5;-1:-1:-1;;;;;1931:31:5;2463:10;1931:31;2444:30;2399:272;;;2541:47;:8;2550:36;;;2541:8;;:47;:::i;:::-;2533:56;;;:::i;:::-;2525:65;;2518:72;;;;2206:471;:::o;2399:272::-;735:10:8;2635:25:5;;;;2206:471;:::o;8370:720:7:-;8450:18;8478:19;8616:4;8613:1;8606:4;8600:11;8593:4;8587;8583:15;8580:1;8573:5;8566;8561:60;8673:7;8663:176;;8717:4;8711:11;8762:16;8759:1;8754:3;8739:40;8808:16;8803:3;8796:29;8663:176;-1:-1:-1;;8916:1:7;8910:8;8866:16;;-1:-1:-1;8942:15:7;;:68;;8994:11;9009:1;8994:16;;8942:68;;;-1:-1:-1;;;;;8960:26:7;;;:31;8942:68;8938:146;;;9033:40;;-1:-1:-1;;;9033:40:7;;-1:-1:-1;;;;;765:32:31;;9033:40:7;;;747:51:31;720:18;;9033:40:7;601:203:31;809:527;958:2;947:9;940:21;921:4;990:6;984:13;1033:6;1028:2;1017:9;1013:18;1006:34;1058:1;1068:140;1082:6;1079:1;1076:13;1068:140;;;1193:2;1177:14;;;1173:23;;1167:30;1162:2;1143:17;;;1139:26;1132:66;1097:10;1068:140;;;1072:3;1257:1;1252:2;1243:6;1232:9;1228:22;1224:31;1217:42;1327:2;1320;1316:7;1311:2;1303:6;1299:15;1295:29;1284:9;1280:45;1276:54;1268:62;;;809:527;;;;:::o;1938:286::-;1997:6;2050:2;2038:9;2029:7;2025:23;2021:32;2018:52;;;2066:1;2063;2056:12;2018:52;2092:23;;-1:-1:-1;;;;;2144:31:31;;2134:42;;2124:70;;2190:1;2187;2180:12;2124:70;2213:5;1938:286;-1:-1:-1;;;1938:286:31:o;2229:226::-;2288:6;2341:2;2329:9;2320:7;2316:23;2312:32;2309:52;;;2357:1;2354;2347:12;2309:52;-1:-1:-1;2402:23:31;;2229:226;-1:-1:-1;2229:226:31:o;2460:753::-;2553:6;2561;2569;2577;2585;2638:3;2626:9;2617:7;2613:23;2609:33;2606:53;;;2655:1;2652;2645:12;2606:53;2700:23;;;-1:-1:-1;2820:2:31;2805:18;;2792:32;;-1:-1:-1;2902:2:31;2887:18;;2874:32;2950:4;2937:18;;2925:31;;2915:59;;2970:1;2967;2960:12;2915:59;2460:753;;;;-1:-1:-1;2993:7:31;;3073:2;3058:18;;3045:32;;-1:-1:-1;3176:3:31;3161:19;3148:33;;2460:753;-1:-1:-1;;2460:753:31:o;3218:380::-;3297:1;3293:12;;;;3340;;;3361:61;;3415:4;3407:6;3403:17;3393:27;;3361:61;3468:2;3460:6;3457:14;3437:18;3434:38;3431:161;;3514:10;3509:3;3505:20;3502:1;3495:31;3549:4;3546:1;3539:15;3577:4;3574:1;3567:15;3431:161;;3218:380;;;:::o;4427:184::-;4497:6;4550:2;4538:9;4529:7;4525:23;4521:32;4518:52;;;4566:1;4563;4556:12;4518:52;-1:-1:-1;4589:16:31;;4427:184;-1:-1:-1;4427:184:31:o;5942:331::-;6047:9;6058;6100:8;6088:10;6085:24;6082:44;;;6122:1;6119;6112:12;6082:44;6151:6;6141:8;6138:20;6135:40;;;6171:1;6168;6161:12;6135:40;-1:-1:-1;;6197:23:31;;;6242:25;;;;;-1:-1:-1;5942:331:31:o;6278:374::-;6399:19;;-1:-1:-1;;6436:40:31;;;6496:2;6488:11;;6485:161;;;6608:26;6604:31;6573:26;6569:31;6562:3;6558:2;6554:12;6551:1;6547:20;6543:58;6539:2;6535:67;6531:105;6522:114;;6485:161;;6278:374;;;;:::o","linkReferences":{},"immutableReferences":{"38":[{"start":496,"length":32},{"start":1500,"length":32},{"start":1755,"length":32},{"start":1968,"length":32},{"start":2097,"length":32},{"start":2158,"length":32}],"41":[{"start":619,"length":32},{"start":2063,"length":32},{"start":2436,"length":32},{"start":2500,"length":32},{"start":2854,"length":32},{"start":3080,"length":32},{"start":3286,"length":32},{"start":3350,"length":32}],"43":[{"start":232,"length":32},{"start":877,"length":32},{"start":1220,"length":32},{"start":1715,"length":32},{"start":2321,"length":32},{"start":2798,"length":32},{"start":2984,"length":32}],"45":[{"start":391,"length":32},{"start":692,"length":32},{"start":1397,"length":32},{"start":1637,"length":32},{"start":2264,"length":32},{"start":2700,"length":32},{"start":3550,"length":32}],"892":[{"start":811,"length":32},{"start":926,"length":32},{"start":3881,"length":32}]}},"methodIdentifiers":{"asset()":"38d52e0f","assetBalance()":"c66f2455","canWithdraw()":"b51459fe","contribute(uint256)":"c1cbbca7","contributeNative()":"1f689935","contributeWithPermit(uint256,uint256,uint8,bytes32,bytes32)":"ce40a308","creator()":"02d05d3f","goal()":"40193883","isNative()":"73cfc6b2","isTrustedForwarder(address)":"572b6c05","isWithdrawn()":"44aa5700","name()":"06fdde03","trustedForwarder()":"7da0a877","withdraw()":"3ccfd60b"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GoalNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributeNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"contributeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"}},\"title\":\"Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contribute(uint256)\":{\"notice\":\"Contribute ERC20 (only for ERC20 vaults). Caller must have approved OR use permit helper.\"},\"contributeNative()\":{\"notice\":\"Contribute native MON via explicit function (use this for meta-tx).\"},\"contributeWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Contribute ERC20 using EIP-2612 permit in the same (meta-)tx.\"}},\"notice\":\"Holds either ONE ERC20 or native MON. Meta-tx aware via ERC2771.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":forge-std/=node_modules/forge-std/src/\"]},\"sources\":{\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ERC2771Context } from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\n\\ninterface IERC20Permit {\\n    function permit(\\n        address owner, address spender, uint256 value,\\n        uint256 deadline, uint8 v, bytes32 r, bytes32 s\\n    ) external;\\n}\\n\\n/**\\n * @title Vault\\n * @notice Holds either ONE ERC20 or native MON. Meta-tx aware via ERC2771.\\n */\\ncontract Vault is ReentrancyGuard, ERC2771Context {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable creator;\\n    IERC20  public immutable asset;      \\n    bool    public immutable isNative;   \\n    uint256 public immutable goal;      \\n    string  public name;\\n\\n    // State\\n    bool public isWithdrawn;\\n\\n    // Events\\n    event Deposited(address indexed from, uint256 amount, uint256 newBalance, bool isNative);\\n    event GoalReached(uint256 timestamp, uint256 balance);\\n    event Withdrawn(address indexed to, uint256 amount, bool isNative);\\n\\n    // Errors\\n    error NotCreator();\\n    error GoalNotReached();\\n    error AlreadyWithdrawn();\\n    error InvalidParam();\\n    error ZeroAmount();\\n    error WrongAsset();\\n\\n    constructor(\\n        address _creator,\\n        IERC20 _asset,           \\n        bool _isNative,\\n        uint256 _goal,\\n        string memory _name,\\n        address trustedForwarder\\n    ) ERC2771Context(trustedForwarder) {\\n        if (_creator == address(0) || _goal == 0) revert InvalidParam();\\n        if (_isNative) {\\n            if (address(_asset) != address(0)) revert InvalidParam();\\n        } else {\\n            if (address(_asset) == address(0)) revert InvalidParam();\\n        }\\n        creator = _creator;\\n        asset = _asset;\\n        isNative = _isNative;\\n        goal = _goal;\\n        name = _name;\\n    }\\n\\n    // Views\\n    function assetBalance() public view returns (uint256) {\\n        return isNative ? address(this).balance : asset.balanceOf(address(this));\\n    }\\n\\n    function canWithdraw() public view returns (bool) {\\n        return !isWithdrawn && assetBalance() >= goal;\\n    }\\n\\n\\n    /// @notice Contribute ERC20 (only for ERC20 vaults). Caller must have approved OR use permit helper.\\n    function contribute(uint256 amount) external nonReentrant {\\n        if (isNative) revert WrongAsset();\\n        if (amount == 0) revert ZeroAmount();\\n        asset.safeTransferFrom(_msgSender(), address(this), amount);\\n        uint256 bal = asset.balanceOf(address(this));\\n        emit Deposited(_msgSender(), amount, bal, false);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    /// @notice Contribute ERC20 using EIP-2612 permit in the same (meta-)tx.\\n    function contributeWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v, bytes32 r, bytes32 s\\n    ) external nonReentrant {\\n        if (isNative) revert WrongAsset();\\n        if (amount == 0) revert ZeroAmount();\\n        IERC20Permit(address(asset)).permit(_msgSender(), address(this), amount, deadline, v, r, s);\\n        asset.safeTransferFrom(_msgSender(), address(this), amount);\\n        uint256 bal = asset.balanceOf(address(this));\\n        emit Deposited(_msgSender(), amount, bal, false);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    /// @notice Contribute native MON via explicit function (use this for meta-tx).\\n    function contributeNative() external payable nonReentrant {\\n        if (!isNative) revert WrongAsset();\\n        if (msg.value == 0) revert ZeroAmount();\\n        uint256 bal = address(this).balance;\\n        emit Deposited(_msgSender(), msg.value, bal, true);\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n    /// @notice Bare receives are allowed for normal EOAs only (not via forwarder).\\n    receive() external payable {\\n        if (!isNative) revert WrongAsset();\\n        // If this comes via a forwarder, calldata will be non-empty \\u2192 it would hit fallback (not defined) and revert.\\n        // Normal EOAs (no calldata) hit receive() and are accepted:\\n        if (msg.value == 0) revert ZeroAmount();\\n        uint256 bal = address(this).balance;\\n        emit Deposited(msg.sender, msg.value, bal, true); // raw sender for direct sends\\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\\n    }\\n\\n\\n    function withdraw() external nonReentrant {\\n        if (_msgSender() != creator) revert NotCreator();\\n        if (isWithdrawn) revert AlreadyWithdrawn();\\n\\n        uint256 bal = assetBalance();\\n        if (bal < goal) revert GoalNotReached();\\n\\n        isWithdrawn = true;\\n\\n        if (isNative) {\\n            (bool ok, ) = payable(creator).call{value: bal}(\\\"\\\");\\n            require(ok, \\\"native transfer failed\\\");\\n            emit Withdrawn(creator, bal, true);\\n        } else {\\n            asset.safeTransfer(creator, bal);\\n            emit Withdrawn(creator, bal, false);\\n        }\\n    }\\n\\n    function _msgSender() internal view override returns (address s) {\\n        return ERC2771Context._msgSender();\\n    }\\n    function _msgData() internal view override returns (bytes calldata d) {\\n        return ERC2771Context._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x09f4b55d8c007abb2ac15f4ba35651ddd19fbd2348588158b4ce01c46531b86e\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC-2771 support.\\n *\\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC-2771\\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\\n * function only accessible if `msg.data.length == 0`.\\n *\\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\\n * recovery.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /**\\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\\n     * invoke functions on this contract on behalf of other accounts.\\n     *\\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder_) {\\n        _trustedForwarder = trustedForwarder_;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the trusted forwarder.\\n     */\\n    function trustedForwarder() public view virtual returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any particular address is the trusted forwarder.\\n     */\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == trustedForwarder();\\n    }\\n\\n    /**\\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgSender() internal view virtual override returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (calldataLength >= contextSuffixLength && isTrustedForwarder(msg.sender)) {\\n            unchecked {\\n                return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /**\\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (calldataLength >= contextSuffixLength && isTrustedForwarder(msg.sender)) {\\n            unchecked {\\n                return msg.data[:calldataLength - contextSuffixLength];\\n            }\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\\n        return 20;\\n    }\\n}\\n\",\"keccak256\":\"0x345acfb731203002ef98916d5a222339709db0ad44dc4a389e7f1ce4088ce59b\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_creator","type":"address"},{"internalType":"contract IERC20","name":"_asset","type":"address"},{"internalType":"bool","name":"_isNative","type":"bool"},{"internalType":"uint256","name":"_goal","type":"uint256"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"address","name":"trustedForwarder","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"type":"error","name":"AlreadyWithdrawn"},{"inputs":[],"type":"error","name":"GoalNotReached"},{"inputs":[],"type":"error","name":"InvalidParam"},{"inputs":[],"type":"error","name":"NotCreator"},{"inputs":[],"type":"error","name":"ReentrancyGuardReentrantCall"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"type":"error","name":"SafeERC20FailedOperation"},{"inputs":[],"type":"error","name":"WrongAsset"},{"inputs":[],"type":"error","name":"ZeroAmount"},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"uint256","name":"newBalance","type":"uint256","indexed":false},{"internalType":"bool","name":"isNative","type":"bool","indexed":false}],"type":"event","name":"Deposited","anonymous":false},{"inputs":[{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":false},{"internalType":"uint256","name":"balance","type":"uint256","indexed":false}],"type":"event","name":"GoalReached","anonymous":false},{"inputs":[{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"bool","name":"isNative","type":"bool","indexed":false}],"type":"event","name":"Withdrawn","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"asset","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"assetBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"canWithdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"contribute"},{"inputs":[],"stateMutability":"payable","type":"function","name":"contributeNative"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"contributeWithPermit"},{"inputs":[],"stateMutability":"view","type":"function","name":"creator","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"goal","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isNative","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"stateMutability":"view","type":"function","name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isWithdrawn","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"trustedForwarder","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"withdraw"},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"isTrustedForwarder(address)":{"details":"Indicates whether any particular address is the trusted forwarder."},"trustedForwarder()":{"details":"Returns the address of the trusted forwarder."}},"version":1},"userdoc":{"kind":"user","methods":{"contribute(uint256)":{"notice":"Contribute ERC20 (only for ERC20 vaults). Caller must have approved OR use permit helper."},"contributeNative()":{"notice":"Contribute native MON via explicit function (use this for meta-tx)."},"contributeWithPermit(uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Contribute ERC20 using EIP-2612 permit in the same (meta-)tx."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","forge-std/=node_modules/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/Vault.sol":"Vault"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/Vault.sol":{"keccak256":"0x09f4b55d8c007abb2ac15f4ba35651ddd19fbd2348588158b4ce01c46531b86e","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { ERC2771Context } from \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\n\ninterface IERC20Permit {\n    function permit(\n        address owner, address spender, uint256 value,\n        uint256 deadline, uint8 v, bytes32 r, bytes32 s\n    ) external;\n}\n\n/**\n * @title Vault\n * @notice Holds either ONE ERC20 or native MON. Meta-tx aware via ERC2771.\n */\ncontract Vault is ReentrancyGuard, ERC2771Context {\n    using SafeERC20 for IERC20;\n\n    address public immutable creator;\n    IERC20  public immutable asset;      \n    bool    public immutable isNative;   \n    uint256 public immutable goal;      \n    string  public name;\n\n    // State\n    bool public isWithdrawn;\n\n    // Events\n    event Deposited(address indexed from, uint256 amount, uint256 newBalance, bool isNative);\n    event GoalReached(uint256 timestamp, uint256 balance);\n    event Withdrawn(address indexed to, uint256 amount, bool isNative);\n\n    // Errors\n    error NotCreator();\n    error GoalNotReached();\n    error AlreadyWithdrawn();\n    error InvalidParam();\n    error ZeroAmount();\n    error WrongAsset();\n\n    constructor(\n        address _creator,\n        IERC20 _asset,           \n        bool _isNative,\n        uint256 _goal,\n        string memory _name,\n        address trustedForwarder\n    ) ERC2771Context(trustedForwarder) {\n        if (_creator == address(0) || _goal == 0) revert InvalidParam();\n        if (_isNative) {\n            if (address(_asset) != address(0)) revert InvalidParam();\n        } else {\n            if (address(_asset) == address(0)) revert InvalidParam();\n        }\n        creator = _creator;\n        asset = _asset;\n        isNative = _isNative;\n        goal = _goal;\n        name = _name;\n    }\n\n    // Views\n    function assetBalance() public view returns (uint256) {\n        return isNative ? address(this).balance : asset.balanceOf(address(this));\n    }\n\n    function canWithdraw() public view returns (bool) {\n        return !isWithdrawn && assetBalance() >= goal;\n    }\n\n\n    /// @notice Contribute ERC20 (only for ERC20 vaults). Caller must have approved OR use permit helper.\n    function contribute(uint256 amount) external nonReentrant {\n        if (isNative) revert WrongAsset();\n        if (amount == 0) revert ZeroAmount();\n        asset.safeTransferFrom(_msgSender(), address(this), amount);\n        uint256 bal = asset.balanceOf(address(this));\n        emit Deposited(_msgSender(), amount, bal, false);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    /// @notice Contribute ERC20 using EIP-2612 permit in the same (meta-)tx.\n    function contributeWithPermit(\n        uint256 amount,\n        uint256 deadline,\n        uint8 v, bytes32 r, bytes32 s\n    ) external nonReentrant {\n        if (isNative) revert WrongAsset();\n        if (amount == 0) revert ZeroAmount();\n        IERC20Permit(address(asset)).permit(_msgSender(), address(this), amount, deadline, v, r, s);\n        asset.safeTransferFrom(_msgSender(), address(this), amount);\n        uint256 bal = asset.balanceOf(address(this));\n        emit Deposited(_msgSender(), amount, bal, false);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    /// @notice Contribute native MON via explicit function (use this for meta-tx).\n    function contributeNative() external payable nonReentrant {\n        if (!isNative) revert WrongAsset();\n        if (msg.value == 0) revert ZeroAmount();\n        uint256 bal = address(this).balance;\n        emit Deposited(_msgSender(), msg.value, bal, true);\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n    /// @notice Bare receives are allowed for normal EOAs only (not via forwarder).\n    receive() external payable {\n        if (!isNative) revert WrongAsset();\n        // If this comes via a forwarder, calldata will be non-empty → it would hit fallback (not defined) and revert.\n        // Normal EOAs (no calldata) hit receive() and are accepted:\n        if (msg.value == 0) revert ZeroAmount();\n        uint256 bal = address(this).balance;\n        emit Deposited(msg.sender, msg.value, bal, true); // raw sender for direct sends\n        if (!isWithdrawn && bal >= goal) emit GoalReached(block.timestamp, bal);\n    }\n\n\n    function withdraw() external nonReentrant {\n        if (_msgSender() != creator) revert NotCreator();\n        if (isWithdrawn) revert AlreadyWithdrawn();\n\n        uint256 bal = assetBalance();\n        if (bal < goal) revert GoalNotReached();\n\n        isWithdrawn = true;\n\n        if (isNative) {\n            (bool ok, ) = payable(creator).call{value: bal}(\"\");\n            require(ok, \"native transfer failed\");\n            emit Withdrawn(creator, bal, true);\n        } else {\n            asset.safeTransfer(creator, bal);\n            emit Withdrawn(creator, bal, false);\n        }\n    }\n\n    function _msgSender() internal view override returns (address s) {\n        return ERC2771Context._msgSender();\n    }\n    function _msgData() internal view override returns (bytes calldata d) {\n        return ERC2771Context._msgData();\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol":{"keccak256":"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC165.sol":{"keccak256":"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n","license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol":{"keccak256":"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n","license":"MIT"},"node_modules/@openzeppelin/contracts/metatx/ERC2771Context.sol":{"keccak256":"0x345acfb731203002ef98916d5a222339709db0ad44dc4a389e7f1ce4088ce59b","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Context variant with ERC-2771 support.\n *\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC-2771\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\n * function only accessible if `msg.data.length == 0`.\n *\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\n * recovery.\n */\nabstract contract ERC2771Context is Context {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n\n    /**\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\n     * invoke functions on this contract on behalf of other accounts.\n     *\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\n     */\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address trustedForwarder_) {\n        _trustedForwarder = trustedForwarder_;\n    }\n\n    /**\n     * @dev Returns the address of the trusted forwarder.\n     */\n    function trustedForwarder() public view virtual returns (address) {\n        return _trustedForwarder;\n    }\n\n    /**\n     * @dev Indicates whether any particular address is the trusted forwarder.\n     */\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == trustedForwarder();\n    }\n\n    /**\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n    function _msgSender() internal view virtual override returns (address) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (calldataLength >= contextSuffixLength && isTrustedForwarder(msg.sender)) {\n            unchecked {\n                return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    /**\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (calldataLength >= contextSuffixLength && isTrustedForwarder(msg.sender)) {\n            unchecked {\n                return msg.data[:calldataLength - contextSuffixLength];\n            }\n        } else {\n            return super._msgData();\n        }\n    }\n\n    /**\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\n     */\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\n        return 20;\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/utils/Context.sol":{"keccak256":"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n","license":"MIT"},"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n","license":"MIT"}},"version":1},"id":0}